#Использовать asserts
#Использовать "../src/internal"

&Тест
Процедура ТестДолжен_ПроверитьОбщийСлучай() Экспорт

	КоманднаяСтрока = "myapp command -a --long-option 2> error.txt";

	Эталон = Новый Массив;
	Эталон.Добавить("myapp");
	Эталон.Добавить("command");
	Эталон.Добавить("-a");
	Эталон.Добавить("--long-option");
	Эталон.Добавить("2>");
	Эталон.Добавить("error.txt");
	
	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).ИмеетДлину(Эталон.Количество());

	Для Инд = 0 По Результат[0].ВГраница() Цикл
		Ожидаем.Что(Результат[0][Инд]).Равно(Эталон[Инд]);
	КонецЦикла;
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьМногострочнуюКоманду() Экспорт

	КоманднаяСтрока = "myapp command -a \
	|--long-option ""value"" \
	| 2> error.txt";

	Эталон = Новый Массив;
	Эталон.Добавить("myapp");
	Эталон.Добавить("command");
	Эталон.Добавить("-a");
	Эталон.Добавить("--long-option");
	Эталон.Добавить("value");
	Эталон.Добавить("2>");
	Эталон.Добавить("error.txt");
	
	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).ИмеетДлину(Эталон.Количество());

	Для Инд = 0 По Результат[0].ВГраница() Цикл
		Ожидаем.Что(Результат[0][Инд]).Равно(Эталон[Инд]);
	КонецЦикла;
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПарсингКавычекСПоддержкойИнтерполяции() Экспорт

	КоманднаяСтрока = "myapp -a ""Te\""xt"" -b \"" -c ""\""\""\"""" -d ""'""";

	Эталон = Новый Массив;
	Эталон.Добавить("myapp");
	Эталон.Добавить("-a");
	Эталон.Добавить("Te""xt");
	Эталон.Добавить("-b");
	Эталон.Добавить("""");
	Эталон.Добавить("-c");
	Эталон.Добавить("""""""");
	Эталон.Добавить("-d");
	Эталон.Добавить("'");
	
	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).ИмеетДлину(Эталон.Количество());

	Для Инд = 0 По Результат[0].ВГраница() Цикл
		Ожидаем.Что(Результат[0][Инд]).Равно(Эталон[Инд]);
	КонецЦикла;
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПарсингКавычекБезПоддержкиИнтерполяции() Экспорт

	КоманднаяСтрока = "myapp -a 'Te\""xt' -b \' -c '""'";

	Эталон = Новый Массив;
	Эталон.Добавить("myapp");
	Эталон.Добавить("-a");	
	Эталон.Добавить("Te\""xt");
	Эталон.Добавить("-b");
	Эталон.Добавить("'");
	Эталон.Добавить("-c");
	Эталон.Добавить("""");
	
	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).ИмеетДлину(Эталон.Количество());

	Для Инд = 0 По Результат[0].ВГраница() Цикл
		Ожидаем.Что(Результат[0][Инд]).Равно(Эталон[Инд]);
	КонецЦикла;
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПробелВЗначенииПараметра() Экспорт

	КоманднаяСтрока = "myapp -a ' '";

	Эталон = Новый Массив;
	Эталон.Добавить("myapp");
	Эталон.Добавить("-a");
	Эталон.Добавить(" ");
	
	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).ИмеетДлину(Эталон.Количество());

	Для Инд = 0 По Результат[0].ВГраница() Цикл
		Ожидаем.Что(Результат[0][Инд]).Равно(Эталон[Инд]);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОператорыСвязыванияКоманд() Экспорт

	КоманднаяСтрока = "myapp -a & myapp -b
	|myapp -c '&' &
	|command1 ; command2 ; 
	|command3 | command4";

	Эталон = Новый Массив;

	Команда = Новый Массив();
	Команда.Добавить("myapp");
	Команда.Добавить("-a");
	Эталон.Добавить(Команда);

	Команда = Новый Массив();
	Команда.Добавить("myapp");
	Команда.Добавить("-b");
	Эталон.Добавить(Команда);

	Команда = Новый Массив();
	Команда.Добавить("myapp");
	Команда.Добавить("-c");
	Команда.Добавить("&");
	Эталон.Добавить(Команда);

	Команда = Новый Массив();
	Команда.Добавить("command1");
	Эталон.Добавить(Команда);
	
	Команда = Новый Массив();
	Команда.Добавить("command2");
	Эталон.Добавить(Команда);
	
	Команда = Новый Массив();
	Команда.Добавить("command3");
	Эталон.Добавить(Команда);
	
	Команда = Новый Массив();
	Команда.Добавить("command4");
	Эталон.Добавить(Команда);

	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(Эталон.Количество());

	Для Инд1 = 0 По Результат.ВГраница() Цикл
		Ожидаем.Что(Результат[Инд1]).ИмеетДлину(Эталон[Инд1].Количество());

		Для Инд2 = 0 По Результат[Инд1].ВГраница() Цикл
			Ожидаем.Что(Результат[Инд1][Инд2]).Равно(Эталон[Инд1][Инд2]);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПоддержкуПробельныхСимволов() Экспорт

	КоманднаяСтрока = "myapp -a \
	|" + Символы.Таб + "-b \
	|" + Символы.ВТаб + "-c \
	|" + Символы.ВК + "-d \
	|" + Символы.ПФ + "-e";
	
	Эталон = Новый Массив;
	Эталон.Добавить("myapp");
	Эталон.Добавить("-a");
	Эталон.Добавить("-b");
	Эталон.Добавить("-c");
	Эталон.Добавить("-d");
	Эталон.Добавить("-e");
	
	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).ИмеетДлину(Эталон.Количество());

	Для Инд = 0 По Результат[0].ВГраница() Цикл
		Ожидаем.Что(Результат[0][Инд]).Равно(Эталон[Инд]);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПоддержкуПустогоЗначения() Экспорт

	КоманднаяСтрока = "myapp1 -a '' -b ' '
	|myapp2 url ''
	|myapp3 url """"
	|myapp4 url''
	|myapp5 url""""
	|myapp6 url '' -f
	|myapp7 url """" -f
	|myapp8 url''''
	|myapp9 url""""""""
	|myapp10 url '' '' ''
	|myapp11 url """" """"";

	Эталон = Новый Массив;

	Команда = Новый Массив;
	Команда.Добавить("myapp1");
	Команда.Добавить("-a");
	Команда.Добавить("");
	Команда.Добавить("-b");
	Команда.Добавить(" ");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp2");
	Команда.Добавить("url");
	Команда.Добавить("");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp3");
	Команда.Добавить("url");
	Команда.Добавить("");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp4");
	Команда.Добавить("url");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp5");
	Команда.Добавить("url");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp6");
	Команда.Добавить("url");
	Команда.Добавить("");
	Команда.Добавить("-f");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp7");
	Команда.Добавить("url");
	Команда.Добавить("");
	Команда.Добавить("-f");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp8");
	Команда.Добавить("url");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp9");
	Команда.Добавить("url");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp10");
	Команда.Добавить("url");
	Команда.Добавить("");
	Команда.Добавить("");
	Команда.Добавить("");
	Эталон.Добавить(Команда);

	Команда = Новый Массив;
	Команда.Добавить("myapp11");
	Команда.Добавить("url");
	Команда.Добавить("");
	Команда.Добавить("");
	Эталон.Добавить(Команда);

	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(Эталон.Количество());

	Для Инд1 = 0 По Результат.ВГраница() Цикл
		Заголовок = СтрШаблон("Команда: %1", Инд1 + 1);
		Ожидаем.Что(Результат[Инд1], Заголовок).ИмеетДлину(Эталон[Инд1].Количество());

		Для Инд2 = 0 По Результат[Инд1].ВГраница() Цикл
			Заголовок = СтрШаблон("Команда: %1, аргумент: %2", Инд1 + 1, Инд2 + 1);
			Ожидаем.Что(Результат[Инд1][Инд2], Заголовок).Равно(Эталон[Инд1][Инд2]);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_РаспарситьКомандуСПробельнымиСимволамиВКонце() Экспорт

	КоманднаяСтрока = "myapp -a  ";
	
	Эталон = Новый Массив;
	Эталон.Добавить("myapp");
	Эталон.Добавить("-a");
	
	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).ИмеетДлину(Эталон.Количество());

	Для Инд = 0 По Результат[0].ВГраница() Цикл
		Ожидаем.Что(Результат[0][Инд]).Равно(Эталон[Инд]);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_РаспарситьКомандуСДвумяСимволамиПереносаСтрокиВКонце() Экспорт

	КоманднаяСтрока = "myapp -a" + Символы.ПС + Символы.ПС;
	
	Эталон = Новый Массив;
	Эталон.Добавить("myapp");
	Эталон.Добавить("-a");
	
	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).ИмеетДлину(Эталон.Количество());

	Для Инд = 0 По Результат[0].ВГраница() Цикл
		Ожидаем.Что(Результат[0][Инд]).Равно(Эталон[Инд]);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_РаспарситьКомандуСОткрытойКавычкойВКонце() Экспорт

	КоманднаяСтрока = "myapp -a """;
	
	Эталон = Новый Массив;
	Эталон.Добавить("myapp");
	Эталон.Добавить("-a");
	
	Парсер = Новый ПарсерКонсольнойКоманды();
	Результат = Парсер.Распарсить(КоманднаяСтрока);

	Ожидаем.Что(Результат).ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).ИмеетДлину(Эталон.Количество());

	Для Инд = 0 По Результат[0].ВГраница() Цикл
		Ожидаем.Что(Результат[0][Инд]).Равно(Эталон[Инд]);
	КонецЦикла;

КонецПроцедуры