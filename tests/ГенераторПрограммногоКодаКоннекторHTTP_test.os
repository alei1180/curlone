// BSLLS:DuplicateStringLiteral-off
// BSLLS:MethodSize-off
// BSLLS:LatinAndCyrillicSymbolInWord-off

#Использовать asserts
#Использовать "../src/core"

Перем КонвертерКомандыCURL; // см. КонвертерКомандыCURL
Перем ГенераторПоУмолчанию; // см. ГенераторПрограммногоКодаКоннекторHTTP

&Инициализация
Процедура ПередЗапускомТестов() Экспорт

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	ГенераторПоУмолчанию = Новый ГенераторПрограммногоКодаКоннекторHTTP();
	
КонецПроцедуры

&Перед
Процедура ПередЗапускомТеста() Экспорт
	КонвертерКомандыCURL.УстановитьЯзыкПеревода("ru");
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьБазовыеСлучаиURL() Экспорт

	ТестовыеДанные = Новый Соответствие();

	ТестовыеДанные.Вставить(
		"curl http://example.com",
		"Результат = КоннекторHTTP.Get(""http://example.com"");"
	);

	ТестовыеДанные.Вставить(
		"curl https://example.com",
		"Результат = КоннекторHTTP.Get(""https://example.com"");"
	);

	ТестовыеДанные.Вставить(
		"curl example.com",
		"Результат = КоннекторHTTP.Get(""http://example.com"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com:8080",
		"Результат = КоннекторHTTP.Get(""http://example.com:8080"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com/",
		"Результат = КоннекторHTTP.Get(""http://example.com"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com/path/to/resource",
		"Результат = КоннекторHTTP.Get(""http://example.com/path/to/resource"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com/path/to/resource/",
		"Результат = КоннекторHTTP.Get(""http://example.com/path/to/resource/"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com?param=value",
		"Результат = КоннекторHTTP.Get(""http://example.com?param=value"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com?param1=value1&param2=value2'",
		"Результат = КоннекторHTTP.Get(""http://example.com?param1=value1&param2=value2"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com?param1=value1&param2=value2&param3=value3'",
		"Результат = КоннекторHTTP.Get(""http://example.com?param1=value1&param2=value2&param3=value3"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com?param='",
		"Результат = КоннекторHTTP.Get(""http://example.com?param"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com?param",
		"Результат = КоннекторHTTP.Get(""http://example.com?param"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com?param=value&param=value2'",
		"Результат = КоннекторHTTP.Get(""http://example.com?param=value&param=value2"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com?param=value%20with%20spaces'",
		"Результат = КоннекторHTTP.Get(""http://example.com?param=value%20with%20spaces"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com?param=%3D'",
		"Результат = КоннекторHTTP.Get(""http://example.com?param=%3D"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com?param=значение'",
		"Результат = КоннекторHTTP.Get(""http://example.com?param=значение"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com#fragment",
		"Результат = КоннекторHTTP.Get(""http://example.com#fragment"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com/#fragment",
		"Результат = КоннекторHTTP.Get(""http://example.com/#fragment"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com/page#section",
		"Результат = КоннекторHTTP.Get(""http://example.com/page#section"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com?param=value#fragment'",
		"Результат = КоннекторHTTP.Get(""http://example.com?param=value#fragment"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com/path%20with%20spaces'",
		"Результат = КоннекторHTTP.Get(""http://example.com/path%20with%20spaces"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com/path with spaces'",
		"Результат = КоннекторHTTP.Get(""http://example.com/path with spaces"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com/path+with+plus'",
		"Результат = КоннекторHTTP.Get(""http://example.com/path+with+plus"");"
	);

	ТестовыеДанные.Вставить(
		"curl 'http://example.com/path;parameter'",
		"Результат = КоннекторHTTP.Get(""http://example.com/path;parameter"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com/file.html",
		"Результат = КоннекторHTTP.Get(""http://example.com/file.html"");"
	);

	ТестовыеДанные.Вставить(
		"curl http://api.example.com",
		"Результат = КоннекторHTTP.Get(""http://api.example.com"");"
	);

	Для Каждого Строка Из ТестовыеДанные Цикл
		ПроверитьКонвертациюБезОшибок(Строка.Ключ, Строка.Значение);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьЗаголовки() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|  -H 'Accept: text/html' \
	|  -H 'Accept-Language: ru,en-US;q=0.9,en;q=0.8' \
	|  -H 'User-Agent: curl' \
	|  -H 'Authorization: Bearer mF_9.B5f-4.1JqM'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Accept"", ""text/html"");
	|Заголовки.Вставить(""Accept-Language"", ""ru,en-US;q=0.9,en;q=0.8"");
	|Заголовки.Вставить(""User-Agent"", ""curl"");
	|Заголовки.Вставить(""Authorization"", ""Bearer mF_9.B5f-4.1JqM"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИнициализациюЗаголовковТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl http://example1.com/page1 http://example2.com/page2 \
	|  -H 'accept: text/html";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""accept"", ""text/html"");
	|
	|// Запрос 1. http://example1.com/page1
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|
	|Результат = КоннекторHTTP.Get(""http://example1.com/page1"", , ДополнительныеПараметры);
	|
	|// Запрос 2. http://example2.com/page2
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|
	|Результат = КоннекторHTTP.Get(""http://example2.com/page2"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуМетодаPOST() Экспорт

	КонсольнаяКоманда = "curl http://example.com -X POST";

	ПрограммныйКод = "Результат = КоннекторHTTP.Post(""http://example.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьАутентификацию() Экспорт

	ТестовыеДанные = Новый Соответствие();

	ТестовыеДанные.Вставить(
		"curl http://example.com -u user:secret",
		"Аутентификация = Новый Структура(""Пользователь, Пароль"", ""user"", ""secret"");
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Аутентификация"", Аутентификация);
		|
		|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com --basic -u user:secret",
		"Аутентификация = Новый Структура(""Пользователь, Пароль"", ""user"", ""secret"");
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Аутентификация"", Аутентификация);
		|
		|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com --digest -u user:secret",
		"Аутентификация = Новый Структура(""Тип, Пользователь, Пароль"", ""Digest"", ""user"", ""secret"");
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Аутентификация"", Аутентификация);
		|
		|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com --ntlm",
		"Аутентификация = Новый Структура(""ИспользоватьАутентификациюОС"", Истина);
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Аутентификация"", Аутентификация);
		|
		|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com --negotiate",
		"Аутентификация = Новый Структура(""ИспользоватьАутентификациюОС"", Истина);
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Аутентификация"", Аутентификация);
		|
		|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com --aws-sigv4 'aws:amz:us-east-2:es' --user 'key:secret'",
		"Аутентификация = Новый Структура();
		|Аутентификация.Вставить(""Тип"", ""AWS4-HMAC-SHA256"");
		|Аутентификация.Вставить(""ИдентификаторКлючаДоступа"", ""key"");
		|Аутентификация.Вставить(""СекретныйКлюч"", ""secret"");
		|Аутентификация.Вставить(""Сервис"", ""es"");
		|Аутентификация.Вставить(""Регион"", ""us-east-2"");
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Аутентификация"", Аутентификация);
		|
		|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com --oauth2-bearer 'mF_9.B5f-4.1JqM'",
		"Аутентификация = Новый Структура(""Токен, Тип"", ""mF_9.B5f-4.1JqM"", ""Bearer"");
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Аутентификация"", Аутентификация);
		|
		|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);"
	);

	Для Каждого Строка Из ТестовыеДанные Цикл
		ПроверитьКонвертациюБезОшибок(Строка.Ключ, Строка.Значение);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуТекстовыхДанныхИФайлов() Экспорт

	КонсольнаяКоманда = "
	|curl http://example1.com \
	|	-d param1=value1 \
	|	--data-ascii 'param2=value2' \
	|	--data 'param3=value3' \
	|	--data 'param5=value5&param6=value6' \
	|	--data ""line1
	|line2"" \
	|	--data @path-to-file1 \
	|	--data @path-to-file2 \
	|	--data-raw '@at@at@' \
	|	--data-binary @path-to-file3 \
	|	--data-binary 'param4=value4'
	|
	|curl http://example2.com --data ""{
	|	\""key\"": \""value\""
	|}""";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file1"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file2"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_2 = СтрЗаменить(ТекстовыеДанныеФайла_2, Символы.ПС, """");
	|ТекстовыеДанныеФайла_2 = СтрЗаменить(ТекстовыеДанныеФайла_2, Символы.ВК, """");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file3"");
	|ТекстовыеДанныеФайла_3 = ЧтениеТекста.Прочитать();
	|
	|Данные = ""param1=value1&param2=value2&param3=value3&param5=value5&param6=value6&line1
	||line2&@at@at@&param4=value4""
	|	+ ""&"" + ТекстовыеДанныеФайла_1
	|	+ ""&"" + ТекстовыеДанныеФайла_2
	|	+ ""&"" + ТекстовыеДанныеФайла_3;
	|
	|Результат = КоннекторHTTP.Post(""http://example1.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Данные = ""{
	||	""""key"""": """"value""""
	||}"";
	|
	|Результат = КоннекторHTTP.Post(""http://example2.com"", Данные);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуДанныхЧерезСоответствие() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--data 'param1=value1' \
	|	--data 'param2=value2&param3=value3'";

	ПрограммныйКод = "Данные = Новый Соответствие();
	|Данные.Вставить(""param1"", ""value1"");
	|Данные.Вставить(""param2"", ""value2"");
	|Данные.Вставить(""param3"", ""value3"");
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", Данные);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИнициализациюТелаЗапросаТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl http://example1.com http://example2.com \
	|	-d param=value \
	|	--data @path-to-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|Данные = ""param=value""
	|	+ ""&"" + ТекстовыеДанныеФайла_1;
	|
	|// Запрос 1. http://example1.com
	|Результат = КоннекторHTTP.Post(""http://example1.com"", Данные);
	|
	|// Запрос 2. http://example2.com
	|Результат = КоннекторHTTP.Post(""http://example2.com"", Данные);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуОдногоФайлаИзDataBinary() Экспорт

	КонсольнаяКоманда = "curl http://example.com --data-binary @path-to-file1";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file1"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", ТекстовыеДанныеФайла_1);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуДвухФайловИзDataBinary() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--data-binary @path-to-file1 \
	|	--data-binary @path-to-file2";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file1"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file2"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|
	|Данные = ТекстовыеДанныеФайла_1
 	|	+ ""&"" + ТекстовыеДанныеФайла_2;
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", Данные);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуФайла() Экспорт

	КонсольнаяКоманда = "curl --upload-file path/to/file.txt http://example.com";

	ПрограммныйКод = "Данные = Новый ДвоичныеДанные(""path/to/file.txt"");
	|Результат = КоннекторHTTP.Put(""http://example.com/file.txt"", Данные);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуНесколькихФайловПоОдномуURL() Экспорт

	КонсольнаяКоманда = "curl --upload-file {path/to/file1.txt,path/to/file2.txt} http://example.com";

	ПрограммныйКод = "// Передача файла 1. path/to/file1.txt
	|Данные = Новый ДвоичныеДанные(""path/to/file1.txt"");
	|Результат = КоннекторHTTP.Put(""http://example.com/file1.txt"", Данные);
	|
	|// Передача файла 2. path/to/file2.txt
	|Данные = Новый ДвоичныеДанные(""path/to/file2.txt"");
	|Результат = КоннекторHTTP.Put(""http://example.com/file2.txt"", Данные);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИгнорированиеПередаваемыхФайловПриПревышенииКоличестваURL() Экспорт

	КонсольнаяКоманда = "curl \
	|	-T path/to/file1.txt \
	|	-T path/to/file2.txt \
	|	-T path/to/file3.txt \
	|	-T path/to/file4.txt \
	|	http://example1.com http://example2.com";

	ПрограммныйКод = "// Запрос 1. http://example1.com
	|Данные = Новый ДвоичныеДанные(""path/to/file1.txt"");
	|Результат = КоннекторHTTP.Put(""http://example1.com/file1.txt"", Данные);
	|
	|// Запрос 2. http://example2.com
	|Данные = Новый ДвоичныеДанные(""path/to/file2.txt"");
	|Результат = КоннекторHTTP.Put(""http://example2.com/file2.txt"", Данные);";

	Ошибки = Неопределено;

	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, ГенераторПоУмолчанию, Ошибки);

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	Ожидаем.Что(Ошибки).Заполнено();
	Ожидаем.Что(Ошибки[0].Текст)
		.Равно("Файл 'path/to/file3.txt' из опции -T, --upload-file был проигнорирован, т.к. отсутствует URL для файла");
	Ожидаем.Что(Ошибки[0].Критичная).ЭтоЛожь();
	Ожидаем.Что(Ошибки[1].Текст)
		.Равно("Файл 'path/to/file4.txt' из опции -T, --upload-file был проигнорирован, т.к. отсутствует URL для файла");
	Ожидаем.Что(Ошибки[1].Критичная).ЭтоЛожь();

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеМетодаPUTиGETДляРазныхURL() Экспорт

	КонсольнаяКоманда = "curl --upload-file path/to/file.txt http://example1.com http://example2.com";

	ПрограммныйКод = "// Запрос 1. http://example1.com
	|Данные = Новый ДвоичныеДанные(""path/to/file.txt"");
	|Результат = КоннекторHTTP.Put(""http://example1.com/file.txt"", Данные);
	|
	|// Запрос 2. http://example2.com
	|Результат = КоннекторHTTP.Get(""http://example2.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуТекстовыхДанныхСКодированием() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--data-urlencode name=val \
	|	--data-urlencode '=encodethis=&' \
	|	--data-urlencode name@file \
	|	--data-urlencode @fileonly";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = КодироватьСтроку(ТекстовыеДанныеФайла_1, СпособКодированияСтроки.КодировкаURL);
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""fileonly"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_2 = КодироватьСтроку(ТекстовыеДанныеФайла_2, СпособКодированияСтроки.КодировкаURL);
	|
	|Данные = ""name=val&encodethis%3D%26""
	|	+ ""&name="" + ТекстовыеДанныеФайла_1
	|	+ ""&"" + ТекстовыеДанныеФайла_2;
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", Данные);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьМножественноеИспользованиеUrl() Экспорт

	КонсольнаяКоманда = "curl http://example1.com \
	|	http://example2.com \
	|	--url http://example3.com \
	|	--url http://example4.com";

	ПрограммныйКод = "// Запрос 1. http://example1.com
	|Результат = КоннекторHTTP.Get(""http://example1.com"");
	|
	|// Запрос 2. http://example2.com
	|Результат = КоннекторHTTP.Get(""http://example2.com"");
	|
	|// Запрос 3. http://example3.com
	|Результат = КоннекторHTTP.Get(""http://example3.com"");
	|
	|// Запрос 4. http://example4.com
	|Результат = КоннекторHTTP.Get(""http://example4.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуДанныхВСтрокуЗапроса() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--get \
	|	-d 'param1=value' \
	|	--data 'param2=value2' \
	|	--data @path-to-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|Результат = КоннекторHTTP.Get(""http://example.com?param1=value&param2=value2&"" + ТекстовыеДанныеФайла_1);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуДанныхВСтрокуЗапросаИзФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--get \
	|	--data @path-to-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|Результат = КоннекторHTTP.Get(""http://example.com?"" + ТекстовыеДанныеФайла_1);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьВставкуДанныхВСтрокуЗапроса() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com?param3=value3#page-1' \
	|	--get \
	|	-d 'param1=value' \
	|	--data 'param2=value2' \
	|	--data @path-to-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|URL = ""http://example.com?param3=value3&param1=value&param2=value2""
	|	+ ""&"" + ТекстовыеДанныеФайла_1
	|	+ ""#page-1"";
	|
	|Результат = КоннекторHTTP.Get(URL);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьHTTPМетодHEAD() Экспорт

	КонсольнаяКоманда = "
	|curl http://example1.com --head
	|curl http://example2.com -X HEAD";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Результат = КоннекторHTTP.Head(""http://example1.com"");
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Результат = КоннекторHTTP.Head(""http://example2.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьHTTPМетодOPTIONS() Экспорт

	КонсольнаяКоманда = "curl http://example.com -X OPTIONS";

	ПрограммныйКод = "Результат = КоннекторHTTP.Options(""http://example.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОбработкуНесколькихКоманд() Экспорт

	КонсольнаяКоманда = "curl http://example1.com & curl http://example2.com";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Результат = КоннекторHTTP.Get(""http://example1.com"");
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Результат = КоннекторHTTP.Get(""http://example2.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОтсутствиеИспользованияЗащищенногоСоединения() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com'";

	ПрограммныйКод = "Результат = КоннекторHTTP.Get(""http://example.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаСПаролем() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' -E certfile.pem:secret";

	ПрограммныйКод = "ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""КлиентскийСертификатSSL"", Новый СертификатКлиентаФайл(""certfile.pem"", ""secret""));
	|
	|Результат = КоннекторHTTP.Get(""https://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаБезПароля() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' --cert certfile.pem";

	ПрограммныйКод = "ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""КлиентскийСертификатSSL"", Новый СертификатКлиентаФайл(""certfile.pem""));
	|
	|Результат = КоннекторHTTP.Get(""https://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаИСертификатыУЦИзФайла() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' --cert certfile.pem --cacert CA-file.txt";

	ПрограммныйКод = "ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""ПроверятьSSL"", Новый СертификатыУдостоверяющихЦентровФайл(""CA-file.txt""));
	|ДополнительныеПараметры.Вставить(""КлиентскийСертификатSSL"", Новый СертификатКлиентаФайл(""certfile.pem""));
	|
	|Результат = КоннекторHTTP.Get(""https://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуПараметровЗапроса() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--url-query name=val \
	|	--url-query '=encodethis=&' \
	|	--url-query name@file \
	|	--url-query @fileonly \
	|	--url-query '+name=%20foo' \
	|	--url-query +@not-a-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = КодироватьСтроку(ТекстовыеДанныеФайла_1, СпособКодированияСтроки.КодировкаURL);
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""fileonly"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_2 = КодироватьСтроку(ТекстовыеДанныеФайла_2, СпособКодированияСтроки.КодировкаURL);
	|
	|URL = ""http://example.com?name=val&encodethis%3D%26&name=%20foo&@not-a-file""
	|	+ ""&name="" + ТекстовыеДанныеФайла_1
	|	+ ""&"" + ТекстовыеДанныеФайла_2;
	|
	|Результат = КоннекторHTTP.Get(URL);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуПараметровЗапросаТолькоИзФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com --url-query @fileonly";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""fileonly"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = КодироватьСтроку(ТекстовыеДанныеФайла_1, СпособКодированияСтроки.КодировкаURL);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com?"" + ТекстовыеДанныеФайла_1);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуПараметровЗапросаИФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--url-query name=val \
	|	--data @path-to-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|ПараметрыЗапроса = Новый Соответствие();
	|ПараметрыЗапроса.Вставить(""name"", ""val"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""ПараметрыЗапроса"", ПараметрыЗапроса);
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", ТекстовыеДанныеФайла_1, ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПрокси() Экспорт

	КонсольнаяКоманда = "curl http://example.com --proxy http://proxy.example:1088";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1088, , , Ложь);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Прокси"", Прокси);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИнициализациюПроксиТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl http://example1.com http://example2.com --proxy http://proxy.example:1088";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1088, , , Ложь);
	|
	|// Запрос 1. http://example1.com
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Прокси"", Прокси);
	|
	|Результат = КоннекторHTTP.Get(""http://example1.com"", , ДополнительныеПараметры);
	|
	|// Запрос 2. http://example2.com
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Прокси"", Прокси);
	|
	|Результат = КоннекторHTTP.Get(""http://example2.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьАутентификациюПроксиBasic() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--proxy http://proxy.example \
	|	--proxy-user user:secret";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1080, ""user"", ""secret"", Ложь);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Прокси"", Прокси);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьАутентификациюПроксиNTLM() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--proxy http://proxy.example \
	|   --proxy-ntlm";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1080);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Прокси"", Прокси);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОшибкуПроксиПротоколНеПоддерживается() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --proxy socks5h://proxy.example";

	Ошибки = Неопределено;

	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, ГенераторПоУмолчанию, Ошибки);

	Ожидаем.Что(Результат).Не_().Заполнено();
	Ожидаем.Что(Ошибки).Заполнено();
	Ожидаем.Что(Ошибки[0].Текст).Равно("Прокси протокол socks5h не поддерживается");
	Ожидаем.Что(Ошибки[0].Критичная).ЭтоИстина(); 
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьТаймаут() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --max-time 20 --connect-timeout 5.5";

	ПрограммныйКод = "ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Таймаут"", 25.5);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОтсутствиеТаймаутаЕслиНеУстановленыОбаТаймаута() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --max-time 20 --connect-timeout 0";

	ПрограммныйКод = "Результат = КоннекторHTTP.Get(""http://example.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуJsonИзФайлов() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' --json @path-to-file1 --json @path-to-file2";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file1"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file2"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|
	|Данные = ТекстовыеДанныеФайла_1
 	|	+ ТекстовыеДанныеФайла_2;
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", Данные, ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуJsonИзСтроки() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' --json '{""drink"": ""coffe""}'";

	ПрограммныйКод = "Данные = Новый Соответствие();
	|Данные.Вставить(""drink"", ""coffe"");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|ДополнительныеПараметры.Вставить(""Json"", Данные);
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуJsonИзНесколькихСтрок() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' \
	|	--json '{""drink"":' \
	|	--json ' ""coffe""}'";

	ПрограммныйКод = "Данные = Новый Соответствие();
	|Данные.Вставить(""drink"", ""coffe"");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|ДополнительныеПараметры.Вставить(""Json"", Данные);
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуJsonИзСтрокиИФайла() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' \
	|	--json '{""drink"": ""coffe"", ""size"": ' \
	|	--json @path-to-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|
	|Данные = ""{""""drink"""": """"coffe"""", """"size"""": ""
	|	+ ТекстовыеДанныеФайла_1;
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", Данные, ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуДанныхВJsonИзData() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|-H 'Content-Type: application/json' \
	|--data '{
	|	""title"": ""Sample Slide Show"",
	|	""date"": ""2024-04-13T08:30:00Z"",
	|	""author"": ""Yours Truly"",
	|	""pages"": 450,
	|	""slides"": [
	|		{
	|			""type"": ""all"", ""title"": ""Wake up to WonderWidgets!""
	|		},
	|		{
	|			""type"": ""all"",
	|			""title"": ""Overview"",
	|			""items"": [
	|				""Why <em>WonderWidgets</em> are great"",
	|				""Who <em>buys</em> WonderWidgets""
	|			]
	|		}
	|	]
	|}'";

	ПрограммныйКод = "Данные = Новый Соответствие();
	|Данные.Вставить(""title"", ""Sample Slide Show"");
	|Данные.Вставить(""date"", Дата(2024, 4, 13, 8, 30, 0));
	|Данные.Вставить(""author"", ""Yours Truly"");
	|Данные.Вставить(""pages"", 450);
	|Данные.Вставить(""slides"", Новый Массив());
	|Данные[""slides""].Добавить(Новый Соответствие());
	|Данные[""slides""][0].Вставить(""type"", ""all"");
	|Данные[""slides""][0].Вставить(""title"", ""Wake up to WonderWidgets!"");
	|Данные[""slides""].Добавить(Новый Соответствие());
	|Данные[""slides""][1].Вставить(""type"", ""all"");
	|Данные[""slides""][1].Вставить(""title"", ""Overview"");
	|Данные[""slides""][1].Вставить(""items"", Новый Массив());
	|Данные[""slides""][1][""items""].Добавить(""Why <em>WonderWidgets</em> are great"");
	|Данные[""slides""][1][""items""].Добавить(""Who <em>buys</em> WonderWidgets"");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|ДополнительныеПараметры.Вставить(""Json"", Данные);
	|
	|Результат = КоннекторHTTP.Post(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -A 'Agent 007'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""User-Agent"", ""Agent 007"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПробелыВUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -A ' '";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""User-Agent"", """");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПустойUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -A ''";

	ПрограммныйКод = "Результат = КоннекторHTTP.Get(""http://example.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОтсутствиеЗамещенияUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -H 'User-Agent: Agent 007' -A 'Agent 001'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""User-Agent"", ""Agent 007"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеОпцийТолькоСвоейКоманды() Экспорт

	КонсольнаяКоманда = "curl http://example1.com -H 'accept: text/html'
	|curl http://example2.com -d 'key=value'
	|curl http://example3.com";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""accept"", ""text/html"");
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
	|
	|Результат = КоннекторHTTP.Get(""http://example1.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""key"", ""value"");
	|
	|Результат = КоннекторHTTP.Post(""http://example2.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #3.
	|
	|Результат = КоннекторHTTP.Get(""http://example3.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПроверитьИспользованиеПеренаправлений() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -L
	|curl http://example.com/ --location
	|curl http://example.com/ --no-location
	|curl http://example.com/ --no-location --location";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"");
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"");
	|
	|//////////////////////////////////////////////
	|// Команда #3.
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""РазрешитьПеренаправление"", Ложь);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #4.
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""РазрешитьПеренаправление"", Ложь);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПроверитьПовторныеПопытки() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --retry 5
	|curl http://example.com/ --retry 0
	|curl http://example.com/ --retry 5 --retry-max-time 0
	|curl http://example.com/ --retry 5 --retry-max-time 30
	|curl http://example.com/ --retry-max-time 30";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""МаксимальноеКоличествоПовторов"", 5);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"");
	|
	|//////////////////////////////////////////////
	|// Команда #3.
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""МаксимальноеКоличествоПовторов"", 5);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #4.
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""МаксимальноеКоличествоПовторов"", 5);
	|ДополнительныеПараметры.Вставить(""МаксимальноеВремяПовторов"", 30);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #5.
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""МаксимальноеВремяПовторов"", 30);
	|
	|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПроверитьПередачуДанныхMultipart() Экспорт

	КонсольнаяКоманда = "curl http://example1.com/ -F name=John -F shoesize=11
	|curl http://example2.com/ -F profile=@portrait.jpg
	|curl http://example3.com/ -F profile=@portrait.jpg --form brief=@file.pdf
	|curl http://example4.com/ -F file=@part1 --form file=@part2
	|curl http://example5.com/ -F name=John -F profile=@portrait.jpg
	|curl http://example6.com/ -F story=<hugefile.txt
	|curl http://example7.com/ -F ""web=@index.html;type=text/html""
	|curl http://example8.com/ -F ""name=daniel;type=text/foo""
	|curl http://example9.com/ -F ""file=@localfile;filename=nameinpost""
	|curl http://example10.com/ -F ""file=@\""local,file\"";filename=\""name;in;post\""""
	|curl http://example11.com/ -F ""colors=\""red; green; blue\"";type=text/x-myapp""
	|curl http://example12.com/ -F ""submit=OK;headers=\""X-submit-type: OK\""""
	|curl http://example13.com/ -F ""json=@data.json;headers=\""X-header: value\""""
	|curl http://example14.com/ -F ""json=@data.json;headers=\""X-header-1: some value 1\"";headers=\""X-header-2: some value 2\""""
	|curl http://example15.com/ --form-string name=data
	|curl http://example16.com/ --form-string 'name=@data;type=some'
	|curl http://example17.com/ -F name=John= -F 'brief=doctor=111;type=text/foo'
	|curl http://example18.com/ -F 'profile=@portrait.jpg;type=text/html,@file1.pdf,@file2.pdf;type=text/xml'
	|
	|curl http://example19.com/ \
	|-F multiline1=""line1
	|\""line2\""
	|'line3'"" \
	|-F 'multiline2=line1
	|line2'";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""name"", ""John"");
	|Данные.Вставить(""shoesize"", ""11"");
	|
	|Результат = КоннекторHTTP.Post(""http://example1.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""profile"");
	|Файл.Вставить(""ИмяФайла"", ""portrait.jpg"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""portrait.jpg""));
	|Файл.Вставить(""Тип"", ""image/jpeg"");
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example2.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #3.
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""profile"");
	|Файл.Вставить(""ИмяФайла"", ""portrait.jpg"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""portrait.jpg""));
	|Файл.Вставить(""Тип"", ""image/jpeg"");
	|Файлы.Добавить(Файл);
	|
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""brief"");
	|Файл.Вставить(""ИмяФайла"", ""file.pdf"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""file.pdf""));
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example3.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #4.
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""file"");
	|Файл.Вставить(""ИмяФайла"", ""part1"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""part1""));
	|Файлы.Добавить(Файл);
	|
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""file"");
	|Файл.Вставить(""ИмяФайла"", ""part2"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""part2""));
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example4.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #5.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""name"", ""John"");
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""profile"");
	|Файл.Вставить(""ИмяФайла"", ""portrait.jpg"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""portrait.jpg""));
	|Файл.Вставить(""Тип"", ""image/jpeg"");
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example5.com"", Данные, ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #6.
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""hugefile.txt"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""story"", ТекстовыеДанныеФайла_1);
	|
	|Результат = КоннекторHTTP.Post(""http://example6.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #7.
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""web"");
	|Файл.Вставить(""ИмяФайла"", ""index.html"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""index.html""));
	|Файл.Вставить(""Тип"", ""text/html"");
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example7.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #8.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""name"", ""daniel"");
	|
	|Результат = КоннекторHTTP.Post(""http://example8.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #9.
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""file"");
	|Файл.Вставить(""ИмяФайла"", ""nameinpost"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""localfile""));
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example9.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #10.
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""file"");
	|Файл.Вставить(""ИмяФайла"", ""name;in;post"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""local,file""));
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example10.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #11.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""colors"", ""red; green; blue"");
	|
	|Результат = КоннекторHTTP.Post(""http://example11.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #12.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""submit"", ""OK"");
	|
	|Результат = КоннекторHTTP.Post(""http://example12.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #13.
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""json"");
	|Файл.Вставить(""ИмяФайла"", ""data.json"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""data.json""));
	|Файл.Вставить(""Заголовки"", Новый Соответствие());
	|Файл.Заголовки.Вставить(""X-header"", ""value"");
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example13.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #14.
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""json"");
	|Файл.Вставить(""ИмяФайла"", ""data.json"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""data.json""));
	|Файл.Вставить(""Заголовки"", Новый Соответствие());
	|Файл.Заголовки.Вставить(""X-header-1"", ""some value 1"");
	|Файл.Заголовки.Вставить(""X-header-2"", ""some value 2"");
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example14.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #15.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""name"", ""data"");
	|
	|Результат = КоннекторHTTP.Post(""http://example15.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #16.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""name"", ""@data;type=some"");
	|
	|Результат = КоннекторHTTP.Post(""http://example16.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #17.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""name"", ""John="");
	|Данные.Вставить(""brief"", ""doctor=111"");
	|
	|Результат = КоннекторHTTP.Post(""http://example17.com"", Данные);
	|
	|//////////////////////////////////////////////
	|// Команда #18.
	|
	|Файлы = Новый Массив();
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""profile"");
	|Файл.Вставить(""ИмяФайла"", ""portrait.jpg"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""portrait.jpg""));
	|Файл.Вставить(""Тип"", ""text/html"");
	|Файлы.Добавить(Файл);
	|
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""profile"");
	|Файл.Вставить(""ИмяФайла"", ""file1.pdf"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""file1.pdf""));
	|Файлы.Добавить(Файл);
	|
	|Файл = Новый Структура();
	|Файл.Вставить(""Имя"", ""profile"");
	|Файл.Вставить(""ИмяФайла"", ""file2.pdf"");
	|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""file2.pdf""));
	|Файл.Вставить(""Тип"", ""text/xml"");
	|Файлы.Добавить(Файл);
	|
	|ДополнительныеПараметры = Новый Структура();
	|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
	|
	|Результат = КоннекторHTTP.Post(""http://example18.com"", , ДополнительныеПараметры);
	|
	|//////////////////////////////////////////////
	|// Команда #19.
	|
	|Данные = Новый Соответствие();
	|Данные.Вставить(""multiline1"", ""line1
	||""""line2""""
	||'line3'"");
	|Данные.Вставить(""multiline2"", ""line1
	||line2"");
	|
	|Результат = КоннекторHTTP.Post(""http://example19.com"", Данные);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеМетодовJson() Экспорт

	Генератор = Новый ГенераторПрограммногоКодаКоннекторHTTP();
	Генератор.ДесериализоватьОтветИзJSON();

	КонсольнаяКоманда = "curl http://example1.com
	|curl http://example2.com -X POST
	|curl http://example3.com -X PUT
	|curl http://example4.com -X DELETE
	|curl http://example5.com -X PATCH";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Результат = КоннекторHTTP.GetJson(""http://example1.com"");
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Результат = КоннекторHTTP.PostJson(""http://example2.com"");
	|
	|//////////////////////////////////////////////
	|// Команда #3.
	|
	|Результат = КоннекторHTTP.PutJson(""http://example3.com"");
	|
	|//////////////////////////////////////////////
	|// Команда #4.
	|
	|Результат = КоннекторHTTP.DeleteJson(""http://example4.com"");
	|
	|//////////////////////////////////////////////
	|// Команда #5.
	|
	|Результат = КоннекторHTTP.Patch(""http://example5.com"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод, Генератор);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПеременные() Экспорт

	ТестовыеДанные = Новый Соответствие();

	ТестовыеДанные.Вставить(
		"curl http://example.com -u usr:$PASSWORD",
		"PASSWORD = """";
		|
		|Аутентификация = Новый Структура(""Пользователь, Пароль"", ""usr"", PASSWORD);
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Аутентификация"", Аутентификация);
		|
		|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com -H ""PRIVATE-TOKEN: $TOKEN""",
		"TOKEN = """";
		|
		|Заголовки = Новый Соответствие();
		|Заголовки.Вставить(""PRIVATE-TOKEN"", TOKEN);
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Заголовки"", Заголовки);
		|
		|Результат = КоннекторHTTP.Get(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com?search=$QUERY1$QUERY2",
		"QUERY1 = """";
		|QUERY2 = """";
		|
		|Результат = КоннекторHTTP.Get(""http://example.com?search="" + QUERY1 + QUERY2);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com -d name=$NAME -d surname=$SURNAME",
		"NAME = """";
		|SURNAME = """";
		|
		|Данные = Новый Соответствие();
		|Данные.Вставить(""name"", NAME);
		|Данные.Вставить(""surname"", SURNAME);
		|
		|Результат = КоннекторHTTP.Post(""http://example.com"", Данные);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com -d name=$NAME -d age=55",
		"NAME = """";
		|
		|Данные = Новый Соответствие();
		|Данные.Вставить(""name"", NAME);
		|Данные.Вставить(""age"", ""55"");
		|
		|Результат = КоннекторHTTP.Post(""http://example.com"", Данные);"
	);

	ТестовыеДанные.Вставить(
		"curl http://$HOST/$PATH?$QUERY#$FRAGMENT",
		"HOST = """";
		|PATH = """";
		|QUERY = """";
		|FRAGMENT = """";
		|
		|Результат = КоннекторHTTP.Get(""http://"" + HOST + ""/"" + PATH + ""?"" + QUERY + ""#"" + FRAGMENT);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com -F $NAME=$VAL",
		"NAME = """";
		|VAL = """";
		|
		|Данные = Новый Соответствие();
		|Данные.Вставить(NAME, VAL);
		|
		|Результат = КоннекторHTTP.Post(""http://example.com"", Данные);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com/ -F $NAME=@$FILE",
		"NAME = """";
		|FILE = """";
		|
		|Файлы = Новый Массив();
		|Файл = Новый Структура();
		|Файл.Вставить(""Имя"", NAME);
		|Файл.Вставить(""ИмяФайла"", FILE);
		|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(FILE));
		|Файлы.Добавить(Файл);
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
		|
		|Результат = КоннекторHTTP.Post(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com -F $NAME=<$FILE",
		"NAME = """";
		|FILE = """";
		|
		|ЧтениеТекста = Новый ЧтениеТекста(FILE);
		|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
		|
		|Данные = Новый Соответствие();
		|Данные.Вставить(NAME, ТекстовыеДанныеФайла_1);
		|
		|Результат = КоннекторHTTP.Post(""http://example.com"", Данные);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com -F ""web=@index.html;type=$TYPE""",
		"TYPE = """";
		|
		|Файлы = Новый Массив();
		|Файл = Новый Структура();
		|Файл.Вставить(""Имя"", ""web"");
		|Файл.Вставить(""ИмяФайла"", ""index.html"");
		|Файл.Вставить(""Данные"", Новый ДвоичныеДанные(""index.html""));
		|Файл.Вставить(""Тип"", TYPE);
		|Файлы.Добавить(Файл);
		|
		|ДополнительныеПараметры = Новый Структура();
		|ДополнительныеПараметры.Вставить(""Файлы"", Файлы);
		|
		|Результат = КоннекторHTTP.Post(""http://example.com"", , ДополнительныеПараметры);"
	);

	ТестовыеДанные.Вставить(
		"curl http://example.com -d ""data1=$VAR"" -d ""data2=$VAR""",
		"VAR = """";
		|
		|Данные = Новый Соответствие();
		|Данные.Вставить(""data1"", VAR);
		|Данные.Вставить(""data2"", VAR);
		|
		|Результат = КоннекторHTTP.Post(""http://example.com"", Данные);"
	);
  
	ТестовыеДанные.Вставить(
		"curl example.com -d $VAR""some text""",
		"VAR = """";
		|
		|Результат = КоннекторHTTP.Post(""http://example.com"", VAR + ""some text"");"
	);

	Для Каждого Строка Из ТестовыеДанные Цикл
		ПроверитьКонвертациюБезОшибок(Строка.Ключ, Строка.Значение);
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод, Генератор = Неопределено)

	Если Генератор = Неопределено Тогда
		Генератор = ГенераторПоУмолчанию;
	КонецЕсли;

	// Результат конвертации
	Ошибки = Неопределено;

	КонвертерКомандыCURL.УстановитьЯзыкПеревода("ru");
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Генератор, Ошибки);

	Ожидаем.Что(Результат, КонсольнаяКоманда).Равно(ПрограммныйКод);
	Ожидаем.Что(Ошибки, КонсольнаяКоманда).Не_().Заполнено();

	// Перевод
	Если СодержитРусскиеБуквы(КонсольнаяКоманда) Тогда
		Возврат;
	КонецЕсли;

	КонвертерКомандыCURL.УстановитьЯзыкПеревода("en");
	РезультатПеревода = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Генератор, Ошибки);

	Ожидаем.Что(РезультатПеревода).Не_().Содержит("{t(");
	Ожидаем.Что(СодержитРусскиеБуквы(РезультатПеревода), "Перевод").ЭтоЛожь();

КонецПроцедуры

Функция СодержитРусскиеБуквы(Строка)

	Алфавит = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"; // BSLLS:Typo-off
	Для Порядок = 1 По СтрДлина(Алфавит) Цикл
		Если СтрНайти(Строка, Сред(Алфавит, Порядок, 1)) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции