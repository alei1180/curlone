#Использовать asserts
#Использовать ".."

Перем КонвертерКомандыCURL; // см. КонвертерКомандыCURL
Перем Генератор; // см. ГенераторПрограммногоКода1С

&Инициализация
Процедура ПередЗапускомТестов() Экспорт

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Генератор = Новый ГенераторПрограммногоКода1С();
	
КонецПроцедуры

&Перед
Процедура ПередЗапускомТеста() Экспорт
	КонвертерКомандыCURL.УстановитьЯзыкПеревода("ru");
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьЗаголовки() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|  -H 'accept: text/html' \
	|  -H 'accept-language: ru,en-US;q=0.9,en;q=0.8' \
	|  -H 'user-agent: curl'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""accept"", ""text/html"");
	|Заголовки.Вставить(""accept-language"", ""ru,en-US;q=0.9,en;q=0.8"");
	|Заголовки.Вставить(""user-agent"", ""curl"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИнициализациюЗаголовковТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl example1.com/page1 example2.com/page2 \
	|  -H 'accept: text/html";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""accept"", ""text/html"");
	|
	|// Запрос 1. example1.com/page1
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/page1"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. example2.com/page2
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/page2"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуМетодаPOST() Экспорт

	КонсольнаяКоманда = "curl http://example.com -X POST";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьАутентификацию() Экспорт

	КонсольнаяКоманда = "curl http://example.com -u user:secret
	|curl http://example.com --basic -u user:secret
	|curl http://example.com --ntlm
	|curl http://example.com --negotiate
	|curl http://example.com --oauth2-bearer 'mF_9.B5f-4.1JqM'";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, ""user"", ""secret"");
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, ""user"", ""secret"");
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #3.
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, , , , , , Истина);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #4.
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, , , , , , Истина);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #5.
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Authorization"", ""Bearer mF_9.B5f-4.1JqM"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуТекстовыхДанныхИФайлов() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	-d param1=value1 \
	|	--data-ascii 'param2=value2' \
	|	--data 'param3=value3' \
	|	--data 'param5=value5&param6=value6' \
	|	--data @path-to-file1 \
	|	--data @path-to-file2 \
	|	--data-raw '@at@at@' \
	|	--data-binary @path-to-file3 \
	|	--data-binary 'param4=value4'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file1"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file2"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_2 = СтрЗаменить(ТекстовыеДанныеФайла_2, Символы.ПС, """");
	|ТекстовыеДанныеФайла_2 = СтрЗаменить(ТекстовыеДанныеФайла_2, Символы.ВК, """");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file3"");
	|ТекстовыеДанныеФайла_3 = ЧтениеТекста.Прочитать();
	|
	|ТелоЗапроса = ""param1=value1&param2=value2&param3=value3&param5=value5&param6=value6&@at@at@&param4=value4""
	|	+ ""&"" + ТекстовыеДанныеФайла_1
	|	+ ""&"" + ТекстовыеДанныеФайла_2
	|	+ ""&"" + ТекстовыеДанныеФайла_3;
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИнициализациюТелаЗапросаТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl http://example1.com http://example2.com \
	|	-d param=value \
	|	--data @path-to-file";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|ТелоЗапроса = ""param=value""
	|	+ ""&"" + ТекстовыеДанныеФайла_1;
	|
	|// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|// Запрос 2. http://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуОдногоФайлаИзDataBinary() Экспорт

	КонсольнаяКоманда = "curl http://example.com --data-binary @path-to-file1";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path-to-file1"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуДвухФайловИзDataBinary() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--data-binary @path-to-file1 \
	|	--data-binary @path-to-file2";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file1"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file2"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|
	|ТелоЗапроса = ТекстовыеДанныеФайла_1
	|	+ ""&"" + ТекстовыеДанныеФайла_2;
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуФайла() Экспорт

	КонсольнаяКоманда = "curl --upload-file path/to/file.txt http://example.com";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/file.txt"");
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path/to/file.txt"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""PUT"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуНесколькихФайловПоОдномуURL() Экспорт

	КонсольнаяКоманда = "curl --upload-file {path/to/file1.txt,path/to/file2.txt} http://example.com";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|
	|// Передача файла 1. path/to/file1.txt
	|HTTPЗапрос = Новый HTTPЗапрос(""/file1.txt"");
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path/to/file1.txt"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""PUT"", HTTPЗапрос);
	|
	|// Передача файла 2. path/to/file2.txt
	|HTTPЗапрос = Новый HTTPЗапрос(""/file2.txt"");
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path/to/file2.txt"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""PUT"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИгнорированиеПередаваемыхФайловПриПревышенииКоличестваURL() Экспорт

	КонсольнаяКоманда = "curl \
	|	-T path/to/file1.txt \
	|	-T path/to/file2.txt \
	|	-T path/to/file3.txt \
	|	-T path/to/file4.txt \
	|	http://example1.com http://example2.com";

	ПрограммныйКод = "// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/file1.txt"");
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path/to/file1.txt"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""PUT"", HTTPЗапрос);
	|
	|// Запрос 2. http://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/file2.txt"");
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path/to/file2.txt"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""PUT"", HTTPЗапрос);";

	Ошибки = Неопределено;

	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Генератор, Ошибки);

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	Ожидаем.Что(Ошибки).Заполнено();
	Ожидаем.Что(Ошибки[0].Текст)
		.Равно("Файл 'path/to/file3.txt' из опции -T, --upload-file был проигнорирован, т.к. отсутствует URL для файла");
	Ожидаем.Что(Ошибки[0].Критичная).ЭтоЛожь();
	Ожидаем.Что(Ошибки[1].Текст)
		.Равно("Файл 'path/to/file4.txt' из опции -T, --upload-file был проигнорирован, т.к. отсутствует URL для файла");
	Ожидаем.Что(Ошибки[1].Критичная).ЭтоЛожь();

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИгнорированиеОпцииGetПриПередачиФайла() Экспорт

	КонсольнаяКоманда = "curl --upload-file path/to/file.txt --get http://example.com";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/file.txt"");
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path/to/file.txt"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""PUT"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеМетодаPUTиGETДляРазныхURL() Экспорт

	КонсольнаяКоманда = "curl --upload-file path/to/file.txt http://example1.com http://example2.com";

	ПрограммныйКод = "// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/file.txt"");
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path/to/file.txt"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""PUT"", HTTPЗапрос);
	|
	|// Запрос 2. http://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьНеизменностьПереданногоЗаголовкаContentType() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	-H 'Content-Type: application/octet-stream' \
	|	--data-binary @path-to-file";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/octet-stream"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path-to-file"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуТекстовыхДанныхСКодированием() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--data-urlencode name=val \
	|	--data-urlencode '=encodethis=&' \
	|	--data-urlencode name@file \
	|	--data-urlencode @fileonly";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = КодироватьСтроку(ТекстовыеДанныеФайла_1, СпособКодированияСтроки.КодировкаURL);
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""fileonly"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_2 = КодироватьСтроку(ТекстовыеДанныеФайла_2, СпособКодированияСтроки.КодировкаURL);
	|
	|ТелоЗапроса = ""name=val&encodethis%3D%26""
	|	+ ""&name="" + ТекстовыеДанныеФайла_1
	|	+ ""&"" + ТекстовыеДанныеФайла_2;
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьМножественноеИспользованиеUrl() Экспорт

	КонсольнаяКоманда = "curl http://example1.com \
	|	http://example2.com \
	|	--url http://example3.com \
	|	--url http://example4.com";

	ПрограммныйКод = "// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. http://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 3. http://example3.com
	|Соединение = Новый HTTPСоединение(""example3.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 4. http://example4.com
	|Соединение = Новый HTTPСоединение(""example4.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуДанныхВСтрокуЗапроса() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--get \
	|	-d 'param1=value' \
	|	--data 'param2=value2' \
	|	--data @path-to-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""?param1=value&param2=value2&"" + ТекстовыеДанныеФайла_1);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуДанныхВСтрокуЗапросаИзФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--get \
	|	--data @path-to-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""?"" + ТекстовыеДанныеФайла_1);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьВставкуДанныхВСтрокуЗапроса() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com?param3=value3#page-1' \
	|	--get \
	|	-d 'param1=value' \
	|	--data 'param2=value2' \
	|	--data @path-to-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеФайла_1 = СтрЗаменить(ТекстовыеДанныеФайла_1, Символы.ВК, """");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|
	|АдресРесурса = ""?param3=value3&param1=value&param2=value2""
	|	+ ""&"" + ТекстовыеДанныеФайла_1
	|	+ ""#page-1"";
	|HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьHTTPМетодHEAD() Экспорт

	КонсольнаяКоманда = "
	|curl http://example1.com --head
	|curl http://example2.com -X HEAD";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""HEAD"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""HEAD"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОбработкуНесколькихКоманд() Экспорт

	КонсольнаяКоманда = "curl http://example1.com & curl http://example2.com";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОтсутствиеИспользованияЗащищенногоСоединения() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com'";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьНаличиеИспользованияЗащищенногоСоединения() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com'";

	ПрограммныйКод = "ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИнициализациюЗащищенногоСоединенияТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl https://example1.com https://example2.com";

	ПрограммныйКод = "ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	|
	|// Запрос 1. https://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. https://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеЗащищенногоСоединенияПриНаличииHTTPSиHTTP() Экспорт

	КонсольнаяКоманда = "curl http://example1.com https://example2.com";

	ПрограммныйКод = "ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	|
	|// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. https://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаСПаролем() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' -E certfile.pem:secret";

	ПрограммныйКод = "СертификатКлиента = Новый СертификатКлиентаФайл(""certfile.pem"", ""secret"");
	|ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаБезПароля() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' --cert certfile.pem";

	ПрограммныйКод = "СертификатКлиента = Новый СертификатКлиентаФайл(""certfile.pem"");
	|ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаИСертификатыУЦИзОС() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' --cert certfile.pem --ca-native";

	ПрограммныйКод = "СертификатКлиента = Новый СертификатКлиентаФайл(""certfile.pem"");
	|СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровОС();
	|ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатыУдостоверяющихЦентров);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры


&Тест
Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаИСертификатыУЦИзФайла() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' --cert certfile.pem --cacert CA-file.txt";

	ПрограммныйКод = "СертификатКлиента = Новый СертификатКлиентаФайл(""certfile.pem"");
	|СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровФайл(""CA-file.txt"");
	|ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатыУдостоверяющихЦентров);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуПараметровЗапроса() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--url-query name=val \
	|	--url-query '=encodethis=&' \
	|	--url-query name@file \
	|	--url-query @fileonly \
	|	--url-query '+name=%20foo' \
	|	--url-query +@not-a-file";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = КодироватьСтроку(ТекстовыеДанныеФайла_1, СпособКодированияСтроки.КодировкаURL);
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""fileonly"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_2 = КодироватьСтроку(ТекстовыеДанныеФайла_2, СпособКодированияСтроки.КодировкаURL);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|
	|АдресРесурса = ""?name=val&encodethis%3D%26&name=%20foo&@not-a-file""
	|	+ ""&name="" + ТекстовыеДанныеФайла_1
	|	+ ""&"" + ТекстовыеДанныеФайла_2;
	|HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуПараметровЗапросаТолькоИзФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com --url-query @fileonly";

	ПрограммныйКод = "ЧтениеТекста = Новый ЧтениеТекста(""fileonly"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|ТекстовыеДанныеФайла_1 = КодироватьСтроку(ТекстовыеДанныеФайла_1, СпособКодированияСтроки.КодировкаURL);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""?"" + ТекстовыеДанныеФайла_1);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуПараметровЗапросаИФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--url-query name=val \
	|	--data @path-to-file";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""?name=val"", Заголовки);
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path-to-file"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПереданноеИмяВыходногоФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com -o file.html";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""file.html"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПереданныеИменаВыходныхФайлов() Экспорт

	КонсольнаяКоманда = "curl \
	|	http://example.com/page1.html -o page1.html \
	|	http://example.com/page2.html --output page2.html";

	ПрограммныйКод = "// Запрос 1. http://example.com/page1.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/page1.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""page1.html"");
	|
	|// Запрос 2. http://example.com/page2.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/page2.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""page2.html"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИзвлечениеИмениВыходногоФайлаИзURL() Экспорт

	КонсольнаяКоманда = "curl \
	|	http://example.com/about.html -O \
	|	http://example.com/catalog/cars.html --remote-name \
	|	http://example.com/index.html";

	ПрограммныйКод = "// Запрос 1. http://example.com/about.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""about.html"");
	|
	|// Запрос 2. http://example.com/catalog/cars.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/catalog/cars.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""cars.html"");
	|
	|// Запрос 3. http://example.com/index.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/index.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИзвлечениеИмениВыходногоФайлаДляВсехURL() Экспорт

	КонсольнаяКоманда = "curl --remote-name-all \
	|	http://example.com/about.html -o file.html \
	|	http://example.com/catalog/cars.html \
	|	http://example.com/index.html";

	ПрограммныйКод = "// Запрос 1. http://example.com/about.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""file.html"");
	|
	|// Запрос 2. http://example.com/catalog/cars.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/catalog/cars.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""cars.html"");
	|
	|// Запрос 3. http://example.com/index.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/index.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""index.html"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОшибкуНеУдалосьПолучитьИмяВыходногоФайлаИзURL() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -O";

	Ошибки = Неопределено;

	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Генератор, Ошибки);

	Ожидаем.Что(Результат).Не_().Заполнено();
	Ожидаем.Что(Ошибки).Заполнено();
	Ожидаем.Что(Ошибки[0].Текст).Равно("Не удалось получить имя файла из URL http://example.com/");
	Ожидаем.Что(Ошибки[0].Критичная).ЭтоИстина();
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьКаталогСохраненияФайловИПереданноеИмяФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com/about.html -o file.html --output-dir '/some/path/'";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""/some/path/file.html"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьКаталогСохраненияФайловИИзвлеченноеИмяФайлаИзURL() Экспорт

	КонсольнаяКоманда = "curl http://example.com/about.html -O --output-dir '/some/path/'";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""/some/path/about.html"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьСозданиеКаталогСохраненияФайлов() Экспорт

	КонсольнаяКоманда = "curl http://example.com/about.html -o file.html --output-dir '/some/path/' --create-dirs
	|curl http://example.com/about.html -O --output-dir '/some/path/' --create-dirs
	|curl http://example.com/about.html -o '/some/path/file.html' --create-dirs
	|curl http://example.com/about.html -o '/some/path\file.html' --create-dirs";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|// Создание каталога по необходимости
	|Каталог = Новый Файл(""/some/path"");
	|Если Не Каталог.Существует() Тогда
	|	СоздатьКаталог(Каталог.ПолноеИмя);
	|КонецЕсли;
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""/some/path/file.html"");
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|// Создание каталога по необходимости
	|Каталог = Новый Файл(""/some/path"");
	|Если Не Каталог.Существует() Тогда
	|	СоздатьКаталог(Каталог.ПолноеИмя);
	|КонецЕсли;
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""/some/path/about.html"");
	|
	|//////////////////////////////////////////////
	|// Команда #3.
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|// Создание каталога по необходимости
	|Каталог = Новый Файл(""/some/path"");
	|Если Не Каталог.Существует() Тогда
	|	СоздатьКаталог(Каталог.ПолноеИмя);
	|КонецЕсли;
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""/some/path/file.html"");
	|
	|//////////////////////////////////////////////
	|// Команда #4.
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|// Создание каталога по необходимости
	|Каталог = Новый Файл(""/some/path"");
	|Если Не Каталог.Существует() Тогда
	|	СоздатьКаталог(Каталог.ПолноеИмя);
	|КонецЕсли;
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""/some/path\file.html"");";
	
	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПрокси() Экспорт

	КонсольнаяКоманда = "curl http://example.com --proxy http://proxy.example:1088";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1088, , , Ложь);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИнициализациюПроксиТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl http://example1.com http://example2.com --proxy http://proxy.example:1088";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1088, , , Ложь);
	|
	|// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. http://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьАутентификациюПроксиBasic() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--proxy http://proxy.example \
	|	--proxy-user user:secret";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1080, ""user"", ""secret"", Ложь);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьАутентификациюПроксиNTLM() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--proxy http://proxy.example \
	|   --proxy-ntlm";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1080);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОшибкуПроксиПротоколНеПоддерживается() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --proxy socks5h://proxy.example";

	Ошибки = Неопределено;

	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Генератор, Ошибки);

	Ожидаем.Что(Результат).Не_().Заполнено();
	Ожидаем.Что(Ошибки).Заполнено();
	Ожидаем.Что(Ошибки[0].Текст).Равно("Прокси протокол socks5h не поддерживается");
	Ожидаем.Что(Ошибки[0].Критичная).ЭтоИстина(); 
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьТаймаут() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --max-time 20 --connect-timeout 5.5";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80, , , , 25.5);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОтсутствиеТаймаутаЕслиНеУстановленыОбаТаймаута() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --max-time 20 --connect-timeout 0";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуJsonИзФайлов() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' --json @path-to-file1 --json @path-to-file2";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file1"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file2"");
	|ТекстовыеДанныеФайла_2 = ЧтениеТекста.Прочитать();
	|
	|ТелоЗапроса = ТекстовыеДанныеФайла_1
	|	+ ТекстовыеДанныеФайла_2;
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуJsonИзСтроки() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' --json '{""drink"": ""coffe""}'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(""{""""drink"""": """"coffe""""}"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуJsonИзНесколькихСтрок() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' \
	|	--json '{""drink"":' \
	|	--json ' ""coffe""}'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(""{""""drink"""": """"coffe""""}"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуJsonИзСтрокиИФайла() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' \
	|	--json '{""drink"": ""coffe"", ""size"": ' \
	|	--json @path-to-file";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""path-to-file"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|
	|ТелоЗапроса = ""{""""drink"""": """"coffe"""", """"size"""": ""
	|	+ ТекстовыеДанныеФайла_1;
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -A 'Agent 007'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""User-Agent"", ""Agent 007"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПробелыВUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -A ' '";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""User-Agent"", """");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПустойUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -A ''";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОтсутстивиеЗамещенияUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -H 'User-Agent: Agent 007' -A 'Agent 001'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""User-Agent"", ""Agent 007"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИспользованиеОпцийТолькоСвоейКоманды() Экспорт

	КонсольнаяКоманда = "curl http://example1.com -H 'accept: text/html'
	|curl http://example2.com -d 'key=value'
	|curl http://example3.com";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""accept"", ""text/html"");
	|
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(""key=value"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #3.
	|
	|Соединение = Новый HTTPСоединение(""example3.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПолучениеПоFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , , Истина);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПолучениеПоFTPS() Экспорт

	КонсольнаяКоманда = "curl ftps://ftp.example.com/file.txt";

	ПрограммныйКод = "ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	|
	|Соединение = Новый FTPСоединение(""ftp.example.com"", 990, , , , Истина, , ЗащищенноеСоединение);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПередачуПользователяFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --user user:secret";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, ""user"", ""secret"", , Истина);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПроксиFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --proxy ftp://proxy.example.com:21";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""ftp"", ""proxy.example.com"", 21, , , Ложь);
	|
	|Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , Прокси, Истина);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПассивныйРежимСоединенияFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --ftp-pasv";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , , Истина);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьАктивныйРежимСоединенияFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --ftp-port -";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПредупреждениеИгнорированиеАдресаОбратногоСоединенияFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --ftp-port 1.1.1.1";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	Ошибки = Неопределено;

	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Генератор, Ошибки);

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	Ожидаем.Что(Ошибки).Заполнено();
	Ожидаем.Что(Ошибки[0].Текст).Равно("Адрес из опции -P, --ftp-port было проигнорировано");
	Ожидаем.Что(Ошибки[0].Критичная).ЭтоЛожь();

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОдновременнуюПередачуАктивногоИПассивногоРежимаСоединенияFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --ftp-pasv --ftp-port -";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИгнорированиеАктивногоРежимаПриИспользованииПроксиFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt \
	|	--proxy ftp://proxy.example.com:21 \
	|	--ftp-port -";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""ftp"", ""proxy.example.com"", 21, , , Ложь);
	|
	|Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , Прокси, Истина);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОтправкуПоFTPСУказаниемЦелевогоИмени() Экспорт

	КонсольнаяКоманда = "curl -T path/to/file.txt ftp://ftp.example.com/newfile.txt";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , , Истина);
	|
	|Соединение.Записать(""path/to/file.txt"", ""/newfile.txt"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОтправкуПоFTPВКореньБезУказанияЦелевогоИмени() Экспорт

	КонсольнаяКоманда = "curl -T path/to/file.txt ftp://ftp.example.com";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , , Истина);
	|
	|Соединение.Записать(""path/to/file.txt"", ""/file.txt"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОтправкуПоFTPВКаталогБезУказанияЦелевогоИмени() Экспорт

	КонсольнаяКоманда = "curl -T path/to/file.txt ftp://ftp.example.com/dir/";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , , Истина);
	|
	|Соединение.Записать(""path/to/file.txt"", ""/dir/file.txt"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПолучениеСпискаФайловВДиректорииFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/dir --list-only";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , , Истина);
	|
	|Файлы = Соединение.НайтиФайлы(""/dir"", ""*"");";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПолучениеЗаголовковФайлаFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/dir/file.txt --head";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , , Истина);
	|
	|Файл = Соединение.НайтиФайлы(""/dir/file.txt"")[0];";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьПроверитьПередачуДанныхMultipart() Экспорт

	КонсольнаяКоманда = "curl http://example1.com/ -F name=John -F shoesize=11
	|curl http://example2.com/ -F profile=@portrait.jpg
	|curl http://example3.com/ -F profile=@portrait.jpg --form brief=@file.pdf
	|curl http://example4.com/ -F file=@part1 --form file=@part2
	|curl http://example5.com/ -F name=John -F profile=@portrait.jpg
	|curl http://example6.com/ -F story=<hugefile.txt
	|curl http://example7.com/ -F 'web=@index.html;type=text/html'
	|curl http://example8.com/ -F 'name=daniel;type=text/foo'
	|curl http://example9.com/ -F ""file=@localfile;filename=nameinpost""
	|curl http://example10.com/ -F ""file=@\""local,file\"";filename=\""name;in;post\""""
	|curl http://example11.com/ -F ""colors=\""red; green; blue\"";type=text/x-myapp""
	|curl http://example12.com/ -F ""submit=OK;headers=\""X-submit-type: OK\""""
	|curl http://example13.com/ -F ""json=@data.json;headers=\""X-header: value\""""
	|curl http://example14.com/ -F ""json=@data.json;headers=\""X-header-1: some value 1\"";headers=\""X-header-2: some value 2\""""
	|curl http://example15.com/ --form-string name=data
	|curl http://example16.com/ --form-string name=@data;type=some
	|curl http://example17.com/ -F name=John= -F brief=doctor=111;type=text/foo
	|curl http://example18.com/ -F profile=@portrait.jpg;type=text/html,@file1.pdf,@file2.pdf;type=text/xml";

	ПрограммныйКод = "//////////////////////////////////////////////
	|// Команда #1.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало name
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""name"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""John"" + РазделительСтрок);
	|// Конец name
	|// Начало shoesize
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""shoesize"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""11"" + РазделительСтрок);
	|// Конец shoesize
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #2.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало profile
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""profile""""; filename=""""portrait.jpg"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: image/jpeg"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""portrait.jpg""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец profile
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #3.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example3.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало profile
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""profile""""; filename=""""portrait.jpg"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: image/jpeg"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""portrait.jpg""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец profile
	|// Начало brief
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""brief""""; filename=""""file.pdf"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: application/octet-stream"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""file.pdf""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец brief
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #4.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example4.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало file
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""file""""; filename=""""part1"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: application/octet-stream"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""part1""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец file
	|// Начало file
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""file""""; filename=""""part2"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: application/octet-stream"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""part2""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец file
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #5.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example5.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало name
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""name"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""John"" + РазделительСтрок);
	|// Конец name
	|// Начало profile
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""profile""""; filename=""""portrait.jpg"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: image/jpeg"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""portrait.jpg""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец profile
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #6.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|ЧтениеТекста = Новый ЧтениеТекста(""hugefile.txt"");
	|ТекстовыеДанныеФайла_1 = ЧтениеТекста.Прочитать();
	|
	|Соединение = Новый HTTPСоединение(""example6.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало story
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""story"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(ТекстовыеДанныеФайла_1 + РазделительСтрок);
	|// Конец story
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #7.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example7.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало web
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""web""""; filename=""""index.html"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: text/html"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""index.html""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец web
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #8.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example8.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало name
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""name"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: text/foo"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""daniel"" + РазделительСтрок);
	|// Конец name
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #9.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example9.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало file
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""file""""; filename=""""nameinpost"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: application/octet-stream"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""localfile""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец file
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #10.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example10.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало file
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""file""""; filename=""""name;in;post"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: application/octet-stream"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""local,file""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец file
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #11.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example11.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало colors
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""colors"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: text/x-myapp"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""red; green; blue"" + РазделительСтрок);
	|// Конец colors
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #12.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example12.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало submit
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""submit"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""X-submit-type: OK"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""OK"" + РазделительСтрок);
	|// Конец submit
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #13.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example13.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало json
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""json""""; filename=""""data.json"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: application/octet-stream"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""X-header: value"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""data.json""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец json
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #14.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example14.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало json
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""json""""; filename=""""data.json"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: application/octet-stream"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""X-header-1: some value 1"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""X-header-2: some value 2"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""data.json""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец json
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #15.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example15.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало name
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""name"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""data"" + РазделительСтрок);
	|// Конец name
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #16.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example16.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало name
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""name"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""@data;type=some"" + РазделительСтрок);
	|// Конец name
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #17.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example17.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало name
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""name"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""John="" + РазделительСтрок);
	|// Конец name
	|// Начало brief
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""brief"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: text/foo"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""doctor=111"" + РазделительСтрок);
	|// Конец brief
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|//////////////////////////////////////////////
	|// Команда #18.
	|
	|РазделительMultipart = СтрЗаменить(Новый УникальныйИдентификатор, ""-"", """");
	|
	|Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""multipart/form-data; boundary="" + РазделительMultipart);
	|
	|Соединение = Новый HTTPСоединение(""example18.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
	|
	|РазделительСтрок = Символы.ВК + Символы.ПС;
	|ЗаписьДанных = Новый ЗаписьДанных(Поток, , , """", """");
	|// Начало profile
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""profile""""; filename=""""portrait.jpg"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: text/html"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""portrait.jpg""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец profile
	|// Начало profile
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""profile""""; filename=""""file1.pdf"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: application/octet-stream"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""file1.pdf""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец profile
	|// Начало profile
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""profile""""; filename=""""file2.pdf"""""" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(""Content-Type: text/xml"" + РазделительСтрок);
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|ЗаписьДанных.Записать(Новый ДвоичныеДанные(""file2.pdf""));
	|ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	|// Конец profile
	|ЗаписьДанных.ЗаписатьСтроку(""--"" + РазделительMultipart + ""--"" + РазделительСтрок);
	|ЗаписьДанных.Закрыть();
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод);
	
КонецПроцедуры

Процедура ПроверитьКонвертациюБезОшибок(КонсольнаяКоманда, ПрограммныйКод)

	// Результат конвертации
	Ошибки = Неопределено;

	КонвертерКомандыCURL.УстановитьЯзыкПеревода("ru");
	РезультатОригинал = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Генератор, Ошибки);

	Ожидаем.Что(РезультатОригинал).Равно(ПрограммныйКод);
	Ожидаем.Что(Ошибки).Не_().Заполнено();

	// Перевод
	КонвертерКомандыCURL.УстановитьЯзыкПеревода("en");
	РезультатПеревода = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Генератор, Ошибки);

	Ожидаем.Что(РезультатПеревода).Не_().Содержит("{t(");

	Алфавит = "абвгдеёжзиклмнопрстуфхцчшщъыьэюя";
	Для Порядок = 1 По СтрДлина(Алфавит) Цикл
		Ожидаем.Что(РезультатПеревода, "Перевод").Не_().Содержит(Сред(Алфавит, Порядок, 1));
	КонецЦикла;

КонецПроцедуры