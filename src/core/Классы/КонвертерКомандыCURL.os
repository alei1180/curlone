#Использовать "../../internal"
#Использовать "../../../lib/cli/src/core"

Перем ОписаниеЗапроса; // см. ОписаниеЗапроса
Перем ИсходящиеОшибки; // Массив из Структура:
                       //   * Текст - Строка - Текст ошибки
                       //   * КритичнаяОшибка - Булево - Признак критичиной ошибки 
Перем Генератор; // Объект генератора программного кода
Перем КонсольноеПриложение; // см. КонсольноеПриложение
Перем ТекущаяКоманда; // см. КомандаПриложения
Перем ОписаниеОпций; // Соответствие
Перем КаталогСохраненияФайлов; // Строка
Перем MIMEТипыРасширенийФайлов; // Соответствие, Неопределено
Перем КодЛокализации; // Строка

#Область ПрограммныйИнтерфейс

// Конвертирует команду curl в программный код
//
// Параметры:
//   КоманднаяСтрока - Строка, Массив из Строка - Текст команды, либо массив аргументов
//   ГенераторПрограммногоКода - Объект, Неопределено - Ссылка на класс генератора программного кода
//   Ошибки - Массив, Неопределено - Выходной параметр. Передает обнаруженные при конвертации ошибки:
//      Массив из Структура:
//        * Текст - Строка - Текст ошибки
//        * Критичная - Булево - Признак критичиной ошибки 
//
// Возвращаемое значение:
//   Строка - Программный код
Функция Конвертировать(КоманднаяСтрока, ГенераторПрограммногоКода = Неопределено, Ошибки = Неопределено) Экспорт
	
	Если ГенераторПрограммногоКода = Неопределено Тогда
		Генератор = Новый ГенераторПрограммногоКода1С();
	Иначе
		Генератор = ГенераторПрограммногоКода;
	КонецЕсли;

	Генератор.УстановитьЯзыкПеревода(КодЛокализации);

	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив();
	КонецЕсли;

	ИсходящиеОшибки = Ошибки;

	ПустойРезультат = "";
	Результат = ПустойРезультат;
	
	Если ТипЗнч(КоманднаяСтрока) = Тип("Массив") Тогда
		АргументыКоманд = Новый Массив();
		АргументыКоманд.Добавить(КоманднаяСтрока);
	Иначе
		Парсер = Новый ПарсерКонсольнойКоманды();
		АргументыКоманд = Парсер.Распарсить(КоманднаяСтрока);
	КонецЕсли;

	Если АргументыКоманд.Количество() = 0 Тогда
		Текст = "Передана пустая команда";
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(Текст));
		Возврат ПустойРезультат;
	КонецЕсли;

	НомерКоманды = 0;
	КоличествоКоманд = АргументыКоманд.Количество();
	Для Каждого АргументыКоманды Из АргументыКоманд Цикл

		НомерКоманды = НомерКоманды + 1;
		ОписаниеЗапроса = Новый ОписаниеЗапроса();
		
		ОбработатьАргументыКоманды(АргументыКоманды, НомерКоманды, КоличествоКоманд);

		ПроверитьНаличиеURL(ОписаниеЗапроса);
		ПроверитьПоддержкуПротокола(ОписаниеЗапроса, Генератор.ПоддерживаемыеПротоколы());

		СгенерированныйКод = "";
		Если Не ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
			СгенерированныйКод = Генератор.Получить(ОписаниеЗапроса, ИсходящиеОшибки);
		КонецЕсли;

		ВывестиСгенерированныйКодКоманды(Результат, СгенерированныйКод, НомерКоманды, КоличествоКоманд);

		Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
			Возврат ПустойРезультат;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Устанавливает язык перевода
//
// Параметры:
//   Локаль - Строка - Код локализации (ru, en)
Процедура УстановитьЯзыкПеревода(Локаль) Экспорт
	КодЛокализации = Локаль;
КонецПроцедуры

// Получает поддерживаемые опции
//
// Возвращаемое значение:
//   Массив из Строка
Функция ПоддерживаемыеОпции() Экспорт

	ПолучитьКонсольноеПриложение();

	ПоддерживаемыеОпции = Новый Массив();

	Для Каждого КлючЗначение Из ОписаниеОпций Цикл
		ИмяОпции = КлючЗначение.Ключ;
		Описание = КлючЗначение.Значение;
		Если Описание.Поддерживается Тогда
			ПоддерживаемыеОпции.Добавить(ИмяОпции);
		КонецЕсли;
	КонецЦикла;

	Возврат ПоддерживаемыеОпции;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриСозданииОбъекта()

	ОписаниеОпций = Новый Соответствие();

	УстановитьЯзыкПеревода("ru");

КонецПроцедуры

Процедура ОбработатьКоманду(Команда) Экспорт

	ТекущаяКоманда = Команда;

	ПрочитатьКаталогСохраненияФайлов();	
	ПрочитатьАдресаРесурсов();
	ПрочитатьИменаВыходныхФайлов();
	ПрочитатьЗаголовки();
	ПрочитатьТипАутентификации();
	ПрочитатьПользователя();
	ПрочитатьBearerToken();
	ПрочитатьAWS4();
	ПрочитатьДанныеДляОтправки();
	ПрочитатьМетодЗапроса();
	ПрочитатьСертификатКлиента();
	ПрочитатьИспользованиеСертификатыУЦИзХранилищаОС();
	ПрочитатьИмяФайлаСертификатовУЦ();
	ПрочитатьПараметрыЗапросаURL();
	ПрочитатьАдресПрокси();
	ПрочитатьПользователяПрокси();
	ПрочитатьТипАутентификацииПрокси();
	ПрочитатьТаймаут();
	ПрочитатьТаймаутСоединения();
	ПрочитатьРежимСоединенияFTP();
	ПрочитатьИспользованиеПеренаправлений();
	ПрочитатьПовторныеПопытки();

	ДополнитьОшибкиНеподдерживаемыеОпции();

КонецПроцедуры

Процедура ПрочитатьМетодЗапроса()

	ЕстьДанныеPOST = ЕстьОпцииГруппыData() Или ЕстьОпцииГруппыForm();

	ЕстьМетодGET = УстановленФлагОпции("get");
	ЕстьМетодPOST = Не УстановленФлагОпции("get") И ЕстьДанныеPOST;
	ЕстьМетодHEAD = УстановленФлагОпции("head");

	Файлы = ЗначениеОпции("upload-file");
	КоличествоФайлов = Файлы.Количество();
	НомерРесурса = 0;
	Для Каждого ОписаниеРесурса Из ОписаниеЗапроса.АдресаРесурсов Цикл
	
		НомерРесурса = НомерРесурса + 1;
		
		Метод = ПоследнееЗначениеОпции("X");
		Если ЗначениеЗаполнено(Метод) Тогда
			ОписаниеРесурса.Метод = ВРег(Метод);
			Продолжить;
		КонецЕсли;

		ЕстьМетодPUT = НомерРесурса <= КоличествоФайлов;
		
		ОшибочныеМетоды = "";
		Если ЕстьМетодPUT Тогда
			Если ЕстьМетодGET И ЕстьДанныеPOST Тогда
				ОшибочныеМетоды = "PUT и GET";
			ИначеЕсли ЕстьМетодPOST Тогда
				ОшибочныеМетоды = "PUT и POST";
			ИначеЕсли ЕстьМетодHEAD Тогда
				ОшибочныеМетоды = "PUT и HEAD";
			КонецЕсли;
		ИначеЕсли ЕстьМетодPOST Тогда
			Если ЕстьМетодHEAD Тогда
				ОшибочныеМетоды = "POST и HEAD";
			КонецЕсли;
		КонецЕсли;
	
		Если Не ПустаяСтрока(ОшибочныеМетоды) Тогда
			ТекстОшибки = СтрШаблон("Запрещено одновременное использование нескольких HTTP методов %1 для URL %2", 
				ОшибочныеМетоды, ОписаниеРесурса.URL);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
			Возврат;
		КонецЕсли;
	
		СтруктураURL = Новый ПарсерURL(ОписаниеРесурса.URL);
		Если ОбщегоНазначения.ЭтоHTTP(СтруктураURL.Схема) Тогда
			Если ЕстьМетодPOST Тогда
				Метод = "POST";
			ИначеЕсли ЕстьМетодPUT Тогда
				Метод = "PUT";
			ИначеЕсли ЕстьМетодHEAD Тогда
				Метод = "HEAD";
			Иначе
				Метод = "GET";
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоFTP(СтруктураURL.Схема) Тогда
			Если Файлы.Количество() Тогда
				Метод = "STOR"; // Залить файл
			ИначеЕсли ЕстьМетодHEAD Тогда
				Метод = "HEAD";
			ИначеЕсли УстановленФлагОпции("list-only") Тогда
				Метод = "NLST"; // Список имен файлов в директории
			Иначе
				Метод = "RETR"; // Скачать файл
			КонецЕсли;
		КонецЕсли;
	
		ОписаниеРесурса.Метод = Метод;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьАдресаРесурсов()
    
	МассивURL = Новый Массив;
	ОбщегоНазначения.ДополнитьМассив(МассивURL, ТекущаяКоманда.ЗначениеАргумента("URL"));
	ОбщегоНазначения.ДополнитьМассив(МассивURL, ЗначениеОпции("url"));

	Для Каждого URL Из МассивURL Цикл
		ОписаниеЗапроса.ДобавитьАдресРесурса(URL);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьИменаВыходныхФайлов()

	ИменаВыходныхФайлов = ЗначениеОпции("output");
	ПризнакиИзвлеченияИмениФайлаИзURL = ЗначениеОпции("remote-name");
	ИзвлекатьИмяФайлаИзURLДляВсех = УстановленФлагОпции("remote-name-all");

	Если ИменаВыходныхФайлов.Количество() И ПризнакиИзвлеченияИмениФайлаИзURL.Количество() Тогда
		ТекстОшибки = "Одновременная передача опций -o (--output) и -O (--remote-name) не поддерживается";
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	// Имя файла из опции
	Индекс = 0;
	Для Каждого ИмяВыходногоФайла Из ИменаВыходныхФайлов Цикл
		Если Индекс > ОписаниеЗапроса.АдресаРесурсов.ВГраница() Тогда
			Прервать;
		КонецЕсли;

		Если ЗначениеЗаполнено(КаталогСохраненияФайлов) Тогда
			ИмяВыходногоФайла = 
				ОбщегоНазначения.ДобавитьКонечныйРазделительПути(КаталогСохраненияФайлов) 
				+ ИмяВыходногоФайла;
		КонецЕсли;

		ОписаниеАдреса = ОписаниеЗапроса.АдресаРесурсов[Индекс];
		ОписаниеАдреса.ИмяВыходногоФайла = ИмяВыходногоФайла;

		Индекс = Индекс + 1;
	КонецЦикла;

	// Имя файла из URL
	Для Индекс = 0 По ОписаниеЗапроса.АдресаРесурсов.ВГраница() Цикл

		ИзвлекатьИмяИзURL = Индекс <= ПризнакиИзвлеченияИмениФайлаИзURL.ВГраница()
			И ПризнакиИзвлеченияИмениФайлаИзURL[Индекс]
			Или ИзвлекатьИмяФайлаИзURLДляВсех;

		Если Не ИзвлекатьИмяИзURL Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеАдреса = ОписаниеЗапроса.АдресаРесурсов[Индекс];
		Если ЗначениеЗаполнено(ОписаниеАдреса.ИмяВыходногоФайла) Тогда
			Продолжить;
		КонецЕсли;

		ПарсерURL = Новый ПарсерURL(ОписаниеАдреса.URL);
		
		ИндексСлеша = СтрНайти(ПарсерURL.Путь, "/", НаправлениеПоиска.СКонца);
		Если ИндексСлеша Тогда
			ИмяВыходногоФайла = СокрЛП(Сред(ПарсерURL.Путь, ИндексСлеша + 1));
		Иначе
			ИмяВыходногоФайла = ПарсерURL.Путь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИмяВыходногоФайла) Тогда
			ТекстОшибки = СтрШаблон("Не удалось получить имя файла из URL %1", ОписаниеАдреса.URL);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
			Возврат;
		КонецЕсли;

		Если ЗначениеЗаполнено(КаталогСохраненияФайлов) Тогда
			ИмяВыходногоФайла = 
				ОбщегоНазначения.ДобавитьКонечныйРазделительПути(КаталогСохраненияФайлов) 
				+ ИмяВыходногоФайла;
		КонецЕсли;

		ОписаниеАдреса.ИмяВыходногоФайла = ИмяВыходногоФайла;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьЗаголовки()

	Заголовки = РазобратьЗаголовки();
	Для Каждого Заголовок Из Заголовки Цикл
		ОписаниеЗапроса.ДобавитьЗаголовок(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;

	ДополнитьЗаголовкиJson();
	ДополнитьЗаголовкиПриНаличииОпцииГруппыData();
	ДополнитьЗаголовокUserAgent();

КонецПроцедуры

Процедура ДополнитьЗаголовкиJson()

	Если Не ЕстьОпции("json") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОписаниеЗапроса.ЗначениеЗаголовка("Content-Type")) Тогда
		ОписаниеЗапроса.ДобавитьЗаголовок("Content-Type", "application/json");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОписаниеЗапроса.ЗначениеЗаголовка("Accept")) Тогда
		ОписаниеЗапроса.ДобавитьЗаголовок("Accept", "application/json");
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьЗаголовкиПриНаличииОпцииГруппыData()
	Если ЕстьОпцииГруппыData()
		И Не УстановленФлагОпции("get")
		И Не ЗначениеЗаполнено(ОписаниеЗапроса.ЗначениеЗаголовка("Content-Type")) Тогда
		ОписаниеЗапроса.ДобавитьЗаголовок("Content-Type", "application/x-www-form-urlencoded");
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьЗаголовокUserAgent()

	UserAgent = ПоследнееЗначениеОпции("user-agent");

	Если UserAgent = Неопределено Или СтрДлина(UserAgent) = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОписаниеЗапроса.ЗначениеЗаголовка("User-Agent")) Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(UserAgent) Тогда
		UserAgent = "";
	КонецЕсли;

	ОписаниеЗапроса.ДобавитьЗаголовок("User-Agent", UserAgent);

КонецПроцедуры

Функция РазобратьЗаголовки()

	Заголовки = Новый Соответствие;
	МассивЗаголовков = ЗначениеОпции("H");
	Для Каждого Строка Из МассивЗаголовков Цикл
		Имя = "";
		Значение = "";

		ПозицияДвоеточия = СтрНайти(Строка, ":");
		Если ПозицияДвоеточия Тогда
			Имя = СокрЛП(Сред(Строка, 1, ПозицияДвоеточия - 1));
			Значение = СокрЛП(Сред(Строка, ПозицияДвоеточия + 1));
		Иначе
			Имя = Строка;
		КонецЕсли;

		Заголовки.Вставить(Имя, Значение);
	КонецЦикла;

	Возврат Заголовки;

КонецФункции


Процедура ПрочитатьТипАутентификации()

	ЕстьBasic = УстановленФлагОпции("basic");
	ЕстьDigest = УстановленФлагОпции("digest");
	ЕстьNTLM = УстановленФлагОпции("ntlm");
	ЕстьNegotiate = УстановленФлагОпции("negotiate");
	AWS4 = ПоследнееЗначениеОпции("aws-sigv4");
	ТокенBearer = ПоследнееЗначениеОпции("oauth2-bearer");

	МножественноеИспользование = ЕстьBasic + ЕстьDigest + ЕстьNTLM + ЕстьNegotiate + ЗначениеЗаполнено(AWS4) + ЗначениеЗаполнено(ТокенBearer);

	Если МножественноеИспользование > 1 Тогда
		ТекстОшибки = "Запрещено использовать несколько типов аутентификации";
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	Если ЕстьBasic Тогда
		ОписаниеЗапроса.ТипАутентификации = ТипыАутентификации.Basic;
	ИначеЕсли ЕстьDigest Тогда
		ОписаниеЗапроса.ТипАутентификации = ТипыАутентификации.Digest;
	ИначеЕсли ЕстьNTLM Тогда
		ОписаниеЗапроса.ТипАутентификации = ТипыАутентификации.NTLM;
	ИначеЕсли ЕстьNegotiate Тогда
		ОписаниеЗапроса.ТипАутентификации = ТипыАутентификации.Negotiate;
	ИначеЕсли ЗначениеЗаполнено(AWS4) Тогда
		ОписаниеЗапроса.ТипАутентификации = ТипыАутентификации.AWS4;
	ИначеЕсли ЗначениеЗаполнено(ТокенBearer) Тогда
		ОписаниеЗапроса.ТипАутентификации = ТипыАутентификации.Bearer;
	ИначеЕсли Не ПоследнееЗначениеОпции("user") = Неопределено Тогда
		ОписаниеЗапроса.ТипАутентификации = ТипыАутентификации.Basic;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьПользователя()

	ПользовательИПароль = ПоследнееЗначениеОпции("u");
	
	Если ПользовательИПароль = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивПодстрок = СтрРазделить(ПользовательИПароль, ":");
	ИмяПользователя = МассивПодстрок[0];
	ПарольПользователя = ?(МассивПодстрок.Количество() = 2, МассивПодстрок[1], "");

	Если ПоследнееЗначениеОпции("aws-sigv4") = Неопределено Тогда
		ОписаниеЗапроса.ИмяПользователя = ИмяПользователя;
		ОписаниеЗапроса.ПарольПользователя = ПарольПользователя;
	Иначе
		ОписаниеЗапроса.AWS4.КлючДоступа = ИмяПользователя;
		ОписаниеЗапроса.AWS4.СекретныйКлюч = ПарольПользователя;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьBearerToken()

	Токен = ПоследнееЗначениеОпции("oauth2-bearer");
	
	Если Токен = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОписаниеЗапроса.ТокенBearer = Токен;

КонецПроцедуры

Процедура ПрочитатьAWS4()

	Значение = ПоследнееЗначениеОпции("aws-sigv4");
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивЭлементов = СтрРазделить(Значение, ":");
	Количество = МассивЭлементов.Количество();
	Если Количество < 2 Тогда
		Возврат;
	КонецЕсли;

	ОписаниеЗапроса.AWS4.Регион = МассивЭлементов[Количество - 2];
	ОписаниеЗапроса.AWS4.Сервис = МассивЭлементов[Количество - 1];

КонецПроцедуры

Процедура ПрочитатьДанныеДляОтправки()

	ПроверитьДанные();

	ПрочитатьData();
	ПрочитатьDataRaw();
	ПрочитатьDataBinary();
	ПрочитатьDataUrlencode();
	ПрочитатьUploadFile();
	ПрочитатьОпициюJson();
	ПрочитатьForm();
	ПрочитатьFormString();

КонецПроцедуры

Процедура ПрочитатьData()

	МассивДанных = ЗначениеОпции("d"); // -d, --data
	Назначение = НазначениеПередаваемыхДанных();

	Для Каждого Данные Из МассивДанных Цикл

		Если Лев(Данные, 1) = "@" Тогда

			ИмяФайла = Сред(Данные, 2);

			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, Назначение);
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ПередаваемыйФайл.УдалятьПереносыСтрок = Истина;
			
			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);

		Иначе

			МассивДанныхПолей = СтрРазделить(Данные, "&");

			Для Каждого ДанныеПоля Из МассивДанныхПолей Цикл
				ПозицияРавенства = СтрНайти(ДанныеПоля, "=");
					
				Если ПозицияРавенства Тогда
					ИмяПоля = Сред(ДанныеПоля, 1, ПозицияРавенства - 1);
					Значение = Сред(ДанныеПоля, ПозицияРавенства + 1);
				Иначе
					ИмяПоля = Неопределено;
					Значение = ДанныеПоля;
				КонецЕсли;

				ПередаваемыйТекст = Новый ПередаваемыйТекст(Значение, Назначение);
				ПередаваемыйТекст.ИмяПоля = ИмяПоля;

				ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
			КонецЦикла;

		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьDataRaw()

	МассивДанных = ЗначениеОпции("data-raw");
	Назначение = НазначениеПередаваемыхДанных();

	Для Каждого Данные Из МассивДанных Цикл
		ПередаваемыйТекст = Новый ПередаваемыйТекст(Данные, Назначение);
		ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьDataBinary()

	МассивДанных = ЗначениеОпции("data-binary");
	Назначение = НазначениеПередаваемыхДанных();

	Для Каждого Данные Из МассивДанных Цикл		
		Если Лев(Данные, 1) = "@" Тогда
			ИмяФайла = Сред(Данные, 2);
			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, Назначение);
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);
		Иначе
			ПередаваемыйТекст = Новый ПередаваемыйТекст(Данные, Назначение);
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьDataUrlencode()

	МассивДанных = ЗначениеОпции("data-urlencode");
	Назначение = НазначениеПередаваемыхДанных();

	Для Каждого Данные Из МассивДанных Цикл

		ПозицияРавенства = СтрНайти(Данные, "=");
		ПозицияСобачки = СтрНайти(Данные, "@");

		Если ПозицияРавенства > 0 Тогда

			ИмяПоля = Сред(Данные, 1, ПозицияРавенства - 1);
			Значение = Сред(Данные, ПозицияРавенства + 1);
		
			ПередаваемыйТекст = Новый ПередаваемыйТекст(Значение, Назначение);	
			ПередаваемыйТекст.КодироватьЗначение = Истина;

			Если Не ПустаяСтрока(ИмяПоля) Тогда
				ПередаваемыйТекст.ИмяПоля = ИмяПоля;
			КонецЕсли;

			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);

		ИначеЕсли ПозицияСобачки > 0 Тогда

			ИмяПоля = Сред(Данные, 1, ПозицияСобачки - 1);
			ИмяФайла = СокрЛП(Сред(Данные, ПозицияСобачки + 1));	
			
			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, Назначение);
			ПередаваемыйФайл.ИмяПоля = ИмяПоля;
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ПередаваемыйФайл.КодироватьСодержимое = Истина;
			
			Если Не ПустаяСтрока(ИмяПоля) Тогда
				ПередаваемыйФайл.ИмяПоля = ИмяПоля;
			КонецЕсли;

			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);

		Иначе

			ПередаваемыйТекст = Новый ПередаваемыйТекст(Данные, Назначение);
			ПередаваемыйТекст.КодироватьЗначение = Истина;
	
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьUploadFile()

	МассивДанных = ЗначениеОпции("T"); // -T, --upload-file
	ФигурныеСкобки = "{}";
	
	Индекс = -1;
	Для Каждого Значение Из МассивДанных Цикл
		Индекс = Индекс + 1;
		Значение = СокрЛП(Значение);

		Если Индекс > ОписаниеЗапроса.АдресаРесурсов.ВГраница() Тогда
			ТекстОшибки = СтрШаблон(
				"Файл '%1' из опции -T, --upload-file был проигнорирован, т.к. отсутствует URL для файла", 
				Значение);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяОшибка(ТекстОшибки));
			Продолжить;
		КонецЕсли;

		ОписаниеРесурса = ОписаниеЗапроса.АдресаРесурсов[Индекс];

		ПервыйСимвол = Лев(Значение, 1);
		ПоследнийСимвол = Прав(Значение, 1);
		
		МассивФайлов = Новый Массив();
		Если ПервыйСимвол = "{" И ПоследнийСимвол = "}" Тогда
			ЗначениеБезСкобок = Сред(Значение, 2, СтрДлина(Значение) - 2);
			МассивФайлов = СтрРазделить(ЗначениеБезСкобок, ",");
		ИначеЕсли СтрНайти(ФигурныеСкобки, ПервыйСимвол) Или СтрНайти(ФигурныеСкобки, ПоследнийСимвол) Тогда
			ТекстОшибки = СтрШаблон(
				"Неправильное использование фигурных скобок в значении '%1' опции -T, --upload-file", 
				Значение);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
			МассивФайлов.Добавить(Значение);
		Иначе
			МассивФайлов.Добавить(Значение);
		КонецЕсли;

		Для Каждого ПутьКФайлу Из МассивФайлов Цикл
			ПередаваемыйФайл = Новый ПередаваемыйФайл(ПутьКФайлу, НазначенияПередаваемыхДанных.ТелоЗапроса);
			ПередаваемыйФайл.ОтправлятьОтдельно = Истина;
			ПередаваемыйФайл.ДобавлятьИмяФайлаКURL = Истина;
			ОписаниеРесурса.Файлы.Добавить(ПередаваемыйФайл);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьОпициюJson()

	МассивДанных = ЗначениеОпции("json");
	Назначение = НазначениеПередаваемыхДанных();
	
	Для Каждого Данные Из МассивДанных Цикл

		Если Лев(Данные, 1) = "@" Тогда
			ИмяФайла = Сред(Данные, 2);

			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, Назначение);
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ПередаваемыйФайл.РазделительТелаЗапроса = "";
			
			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);
		Иначе
			ПередаваемыйТекст = Новый ПередаваемыйТекст(Данные, Назначение);
			ПередаваемыйТекст.РазделительТелаЗапроса = "";	
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьForm()

	МассивДанных = ЗначениеОпции("form"); // -f, --Form
	
	Если МассивДанных.Количество() > 0 Тогда
		ОписаниеЗапроса.ОтправлятьКакMultipartFormData = Истина;
	КонецЕсли;

	Для Каждого Данные Из МассивДанных Цикл
		ОбработатьДанныеПоляФормы(Данные);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьДанныеПоляФормы(Данные)

	Назначение = НазначенияПередаваемыхДанных.ТелоЗапроса;
	Парсер = Новый ПарсерЗначенияОпцииForm();
	ДанныеПоляФормы = Парсер.Распарсить(Данные);

	Если ДанныеПоляФормы.Значения.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон("В опции -F (--form) некорректно указано значение: '%1'", Данные);
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;		
	КонецЕсли;

	ЭтоФайл = Ложь;

	Для Каждого ОписаниеЗначения Из ДанныеПоляФормы.Значения Цикл
		ТипMIME = ОписаниеЗначения.Параметры["type"];
		ПервыйСимвол = Лев(ОписаниеЗначения.Значение, 1);
		ЕстьСимволОпределенияФайла = ПервыйСимвол = "@" Или ПервыйСимвол = "<";
		ЭтоФайл = ЭтоФайл Или ЕстьСимволОпределенияФайла;

		Если ЭтоФайл Тогда
			Если ЕстьСимволОпределенияФайла Тогда
				ПолноеИмяФайла = Сред(ОписаниеЗначения.Значение, 2);
			Иначе
				ПолноеИмяФайла = ОписаниеЗначения.Значение;
			КонецЕсли;

			ПередаваемыйЭлемент = Новый ПередаваемыйФайл(ПолноеИмяФайла, Назначение);
			ПередаваемыйЭлемент.ПрочитатьСодержимое = ПервыйСимвол = "<";
			ПередаваемыйЭлемент.ИмяПоля = ДанныеПоляФормы.ИмяПоля;
			ПередаваемыйЭлемент.Заголовки = ОписаниеЗначения.Параметры["headers"];

			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйЭлемент);
			
			// ИмяФайла
			ИмяФайла = ОписаниеЗначения.Параметры["filename"];
			Если Не ИмяФайла = Неопределено Тогда
				ПередаваемыйЭлемент.ИмяФайла = ИмяФайла;
			Иначе
				ПередаваемыйЭлемент.ИмяФайла = Новый Файл(ПолноеИмяФайла).Имя;
			КонецЕсли;
			
			// ТипMIME
			Если Не ТипMIME = Неопределено Тогда
				ПередаваемыйЭлемент.ТипMIME = ТипMIME;
			ИначеЕсли Не ПередаваемыйЭлемент.ПрочитатьСодержимое Тогда
				ТипMIME = MIMEТипПоРасширениюФайла(Новый Файл(ПередаваемыйЭлемент.ПолноеИмяФайла).Расширение);
				Если Не ТипMIME = Неопределено Тогда
					ПередаваемыйЭлемент.ТипMIME = ТипMIME;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПередаваемыйЭлемент = Новый ПередаваемыйТекст(ОписаниеЗначения.Значение, Назначение);
			ПередаваемыйЭлемент.ИмяПоля = ДанныеПоляФормы.ИмяПоля;
			ПередаваемыйЭлемент.Заголовки = ОписаниеЗначения.Параметры["headers"];

			Если Не ТипMIME = Неопределено Тогда
				ПередаваемыйЭлемент.ТипMIME = ТипMIME;
			КонецЕсли;

			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйЭлемент);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьFormString()

	МассивДанных = ЗначениеОпции("form-string");
	Назначение = НазначенияПередаваемыхДанных.ТелоЗапроса;

	Если МассивДанных.Количество() > 0 Тогда
		ОписаниеЗапроса.ОтправлятьКакMultipartFormData = Истина;
	КонецЕсли;

	Для Каждого Данные Из МассивДанных Цикл

		ПозицияРавенства = СтрНайти(Данные, "=");

		Если ПозицияРавенства = 0 Тогда
			ТекстОшибки = СтрШаблон("В опции --form-string некорректно указано значение: '%1'", Данные);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
			Возврат;
		КонецЕсли;

		ИмяПоля = Сред(Данные, 1, ПозицияРавенства - 1);
		Значение = Сред(Данные, ПозицияРавенства + 1);

		Если ПустаяСтрока(ИмяПоля) Тогда
			ИмяПоля = "null";
		КонецЕсли;

		ПередаваемыйТекст = Новый ПередаваемыйТекст(Значение, Назначение);
		ПередаваемыйТекст.ИмяПоля = ИмяПоля;

		ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьСертификатКлиента()

	СертификатКлиента = ПоследнееЗначениеОпции("E");

	Если СертификатКлиента = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПозицияДвоеточия = СтрНайти(СертификатКлиента, ":");
	Если ПозицияДвоеточия > 0 Тогда
		ОписаниеЗапроса.ИмяФайлаСертификатаКлиента = Сред(СертификатКлиента, 1, ПозицияДвоеточия - 1);
		ОписаниеЗапроса.ПарольСертификатаКлиента = Сред(СертификатКлиента, ПозицияДвоеточия + 1);
	Иначе
		ОписаниеЗапроса.ИмяФайлаСертификатаКлиента = СертификатКлиента;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьИмяФайлаСертификатовУЦ()

	МассивЗначений = ЗначениеОпции("cacert");
	Если МассивЗначений.Количество() Тогда
		ОписаниеЗапроса.ИмяФайлаСертификатовУЦ = МассивЗначений[МассивЗначений.ВГраница()];
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьИспользованиеСертификатыУЦИзХранилищаОС()

	ОписаниеЗапроса.ИспользоватьСертификатыУЦИзХранилищаОС = УстановленФлагОпции("ca-native");

КонецПроцедуры

Процедура ПрочитатьПараметрыЗапросаURL()
    
	МассивДанных = ЗначениеОпции("url-query");

	Для Каждого Данные Из МассивДанных Цикл
		
		НачинаетсяСПлюса = Лев(Данные, 1) = "+";
		Если НачинаетсяСПлюса Тогда
			Данные = Сред(Данные, 2);
		КонецЕсли;

		ПозицияРавенства = СтрНайти(Данные, "=");
		ПозицияСобачки = СтрНайти(Данные, "@");
		КодироватьЗначение = Не НачинаетсяСПлюса;

		Если ПозицияРавенства > 0 Тогда

			ИмяПоля = Сред(Данные, 1, ПозицияРавенства - 1);
			Значение = Сред(Данные, ПозицияРавенства + 1);

			ПередаваемыйТекст = Новый ПередаваемыйТекст(Значение, НазначенияПередаваемыхДанных.СтрокаЗапроса);
			ПередаваемыйТекст.КодироватьЗначение = КодироватьЗначение;
			
			Если Не ПустаяСтрока(ИмяПоля) Тогда
				ПередаваемыйТекст.ИмяПоля = ИмяПоля;
			КонецЕсли;

			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);

		ИначеЕсли ПозицияСобачки > 0 И Не НачинаетсяСПлюса Тогда

			ИмяПоля = Сред(Данные, 1, ПозицияСобачки - 1);
			ИмяФайла = СокрЛП(Сред(Данные, ПозицияСобачки + 1));	
			
			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, НазначенияПередаваемыхДанных.СтрокаЗапроса);
			ПередаваемыйФайл.ИмяПоля = ИмяПоля;
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ПередаваемыйФайл.КодироватьСодержимое = Истина;

			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);

		Иначе

			ПередаваемыйТекст = Новый ПередаваемыйТекст(Данные, НазначенияПередаваемыхДанных.СтрокаЗапроса);
			ПередаваемыйТекст.КодироватьЗначение = КодироватьЗначение;

			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьКаталогСохраненияФайлов()

	КаталогСохраненияФайлов = "";	
	Каталог = ПоследнееЗначениеОпции("output-dir");
	Если Не Каталог = Неопределено Тогда
		КаталогСохраненияФайлов = Каталог;
	КонецЕсли;

	ОписаниеЗапроса.СоздатьКаталогСохраненияФайлов = УстановленФлагОпции("create-dirs");

КонецПроцедуры

Процедура ПрочитатьАдресПрокси()

	АдресПрокси = ПоследнееЗначениеОпции("proxy");

	Если АдресПрокси = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПарсерURL = Новый ПарсерURL(АдресПрокси);

	ОписаниеЗапроса.ПроксиСервер = ПарсерURL.Сервер;
	
	ОписаниеЗапроса.ПроксиПротокол = НРег(ПарсерURL.Схема);
	Если Не ЗначениеЗаполнено(ОписаниеЗапроса.ПроксиПротокол) Тогда
		ОписаниеЗапроса.ПроксиПротокол = ПротоколыURL.HTTP;
	КонецЕсли;

	ОписаниеЗапроса.ПроксиПорт = ПарсерURL.Порт;
	Если Не ЗначениеЗаполнено(ОписаниеЗапроса.ПроксиПорт) Тогда
		ОписаниеЗапроса.ПроксиПорт = 1080;	
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьПользователяПрокси()

	СтрокаПользователя = ПоследнееЗначениеОпции("proxy-user");

	Если СтрокаПользователя = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИндексДвоеточия = СтрНайти(СтрокаПользователя, ":");
	Если ИндексДвоеточия > 0 Тогда
		ОписаниеЗапроса.ПроксиПользователь = Сред(СтрокаПользователя, 1, ИндексДвоеточия - 1);
		ОписаниеЗапроса.ПроксиПароль = Сред(СтрокаПользователя, ИндексДвоеточия + 1);
	Иначе
		ОписаниеЗапроса.ПроксиПользователь = СтрокаПользователя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТипАутентификацииПрокси()

	Если УстановленФлагОпции("proxy-ntlm") Тогда
		ОписаниеЗапроса.ТипАутентификацииПрокси = ТипыАутентификации.NTLM;
	Иначе
		ОписаниеЗапроса.ТипАутентификацииПрокси = ТипыАутентификации.Basic;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьТаймаут()

	Таймаут = ПоследнееЗначениеОпции("max-time");
	Если Не Таймаут = Неопределено Тогда
		ОписаниеЗапроса.Таймаут = Таймаут;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьТаймаутСоединения()

	ТаймаутСоединения = ПоследнееЗначениеОпции("connect-timeout");
	Если Не ТаймаутСоединения = Неопределено Тогда
		ОписаниеЗапроса.ТаймаутСоединения = ТаймаутСоединения;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьРежимСоединенияFTP()

	АдресДляОбратногоСоединения = ПоследнееЗначениеОпции("ftp-port");
	АдресПрокси = ПоследнееЗначениеОпции("proxy");

	Если ЗначениеЗаполнено(АдресДляОбратногоСоединения) И Не ЗначениеЗаполнено(АдресПрокси) Тогда
		ОписаниеЗапроса.FTPАдресОбратногоСоединения = АдресДляОбратногоСоединения;
		ОписаниеЗапроса.FTPПассивныйРежимСоединения = Ложь;
	Иначе
		ОписаниеЗапроса.FTPПассивныйРежимСоединения = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьИспользованиеПеренаправлений()

	ОписаниеЗапроса.РазрешитьПеренаправление = УстановленФлагОпции("location");
	ОписаниеЗапроса.ЗапретитьПеренаправление = УстановленФлагОпции("no-location");

КонецПроцедуры

Процедура ПрочитатьПовторныеПопытки()

	МаксимальноеКоличествоПовторов = ПоследнееЗначениеОпции("retry");
	МаксимальноеВремяПовторов = ПоследнееЗначениеОпции("retry-max-time");

	Если Не МаксимальноеКоличествоПовторов = Неопределено Тогда
		ОписаниеЗапроса.МаксимальноеКоличествоПовторов = МаксимальноеКоличествоПовторов;
	КонецЕсли;	

	Если Не МаксимальноеВремяПовторов = Неопределено Тогда
		ОписаниеЗапроса.МаксимальноеВремяПовторов = МаксимальноеВремяПовторов;
	КонецЕсли;

КонецПроцедуры

Функция НазначениеПередаваемыхДанных()
	Если УстановленФлагОпции("get") Тогда
		Возврат НазначенияПередаваемыхДанных.СтрокаЗапроса;
	Иначе
		Возврат НазначенияПередаваемыхДанных.ТелоЗапроса;
	КонецЕсли;
КонецФункции

Функция ПолучитьКонсольноеПриложение()

	Если Не КонсольноеПриложение = Неопределено Тогда
		Возврат КонсольноеПриложение;
	КонецЕсли;

	КонсольноеПриложение = Новый КонсольноеПриложение("curl", "", ЭтотОбъект);
	КонсольноеПриложение.УстановитьСпек("[ANY]");	
	КонсольноеПриложение.УстановитьОсновноеДействие(ЭтотОбъект, "ОбработатьКоманду");

	КонсольноеПриложение.Аргумент("URL", "", "Адрес ресурса").ТМассивСтрок();

	// Поддерживаемые
	ДобавитьПоддерживаемуюОпцию(
		"url",  
		"URL").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"H header", 
		"HTTP заголовок").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"X request", 
		"Метод запроса").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"u user", 
		"Пользователь и пароль").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"d data data-ascii", 
		"Передаваемые данные по HTTP POST").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"data-raw", 
		"Передаваемые данные по HTTP POST без интерпретации символа @").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"data-binary", 
		"Передаваемые двоичные данные по HTTP POST").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"data-urlencode", 
		"Передаваемые данные по HTTP POST с URL кодированием").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"T upload-file", 
		"Загружаемый файл").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"G get", 
		"Данные из опций -d и --data-... добавляются в URL как строка запроса").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"I head", 
		"Получение заголовков").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"E cert", 
		"Сертификат клиента").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"ca-native", 
		"Использование сертификатов УЦ из системного хранилища сертификатов операционной системы")
		.ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"cacert", 
		"Файл сертификатов удостоверяющих центров").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"url-query", 
		"Параметры строки запроса URL").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"o output", 
		"Имя выходного файла").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"output-dir", 
		"Каталог сохранения файлов").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"create-dirs",
		"Создает каталог сохранения файла при необходимости").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"O remote-name", 
		"Извлечение имени выходного файла из URL").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"remote-name-all", 
		"Извлечение имени выходного файла для всех URL").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"x proxy", 
		"Прокси").ТМассивСтрок();
		
	ДобавитьПоддерживаемуюОпцию(
		"U proxy-user", 
		"Пользователь прокси").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"proxy-basic", 
		"Использовать HTTP Basic-аутентификация прокси").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"proxy-ntlm", 
		"Использовать NTLM-аутентификацию").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"m max-time", 
		"Максимальное время ожидания на выполнение запроса").ТМассивЧисел();

	ДобавитьПоддерживаемуюОпцию(
		"connect-timeout", 
		"Максимальное время ожидания на попытку соединения к хосту").ТМассивЧисел();

	ДобавитьПоддерживаемуюОпцию(
		"json",  
		"Данные JSON").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"A user-agent",  
		"HTTP заголовок запроса User-Agent").ТМассивСтрок();		

	ДобавитьПоддерживаемуюОпцию(
		"oauth2-bearer",  
		"Bearer-token").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"ftp-pasv", 
		"Использование пассивного режима ftp-соединения").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"P ftp-port", 
		"Использование активного режима ftp-соединения").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"l list-only",
		"Получение списка имен файлов в директории FTP").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"L location", 
		"Разрешает перенаправления").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"no-location", 
		"Запрещает перенаправления").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"retry", 
		"Количество повторных попыток").ТМассивЧисел();

	ДобавитьПоддерживаемуюОпцию(
		"retry-max-time", 
		"Максимальное время повторов").ТМассивЧисел();

	ДобавитьПоддерживаемуюОпцию(
		"F form", 
		"Передаваемые данные по HTTP POST (multipart/form-data)").ТМассивСтрок();

	ДобавитьПоддерживаемуюОпцию(
		"form-string", 
		"Передаваемые данные по HTTP POST без интерпретации спецтальных сиволов (multipart/form-data)").ТМассивСтрок();
		
	ДобавитьПоддерживаемуюОпцию(
		"basic",
		"Basic аутентификация").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"digest",
		"Digest аутентификация").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"ntlm",
		"NTLM аутентификация").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"negotiate",
		"Negotiate аутентификация").ТМассивБулево();

	ДобавитьПоддерживаемуюОпцию(
		"aws-sigv4",
		"AWS V4 signature аутентификация").ТМассивСтрок();

	// Неподдерживаемые
	ДобавитьНеподдерживаемуюОпцию("abstract-unix-socket").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("alt-svc").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("anyauth").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("a append").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("capath").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("cert-status").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("cert-type").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ciphers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("compressed").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("compressed-ssh").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("K config").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("connect-to").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("C continue-at").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("b cookie").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("c cookie-jar").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("create-file-mode").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("crlf").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("crlfile").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("curves").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("delegation").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("q disable").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("disable-eprt").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("disable-epsv").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("disallow-username-in-url").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("dns-interface").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("dns-ipv4-addr").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("dns-ipv6-addr").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("dns-servers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("doh-cert-status").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("doh-insecure").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("doh-url").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("dump-ca-embed").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("D dump-header").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ech").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("egd-file").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("engine").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("etag-compare").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("etag-save").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("expect100-timeout").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("f fail").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("fail-early").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("fail-with-body").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("false-start").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("form-escape").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ftp-account").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ftp-alternative-to-user").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ftp-create-dirs").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ftp-method").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ftp-pret").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ftp-skip-pasv-ip").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ftp-ssl-ccc").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ftp-ssl-ccc-mode").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ftp-ssl-control").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("g globoff").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("happy-eyeballs-timeout-ms").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("haproxy-clientip").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("haproxy-protocol").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("h help").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("hostpubmd5").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("hostpubsha256").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("hsts").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("http0.9").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("0 http1.0").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("http1.1").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("http2").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("http2-prior-knowledge").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("http3").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("http3-only").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ignore-content-length").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("k insecure").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("interface").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ip-tos").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ipfs-gateway").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("4 ipv4").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("6 ipv6").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("j junk-session-cookies").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("keepalive-cnt").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("keepalive-time").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("key").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("key-type").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("krb").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("libcurl").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("limit-rate").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("local-port").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("location-trusted").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("login-options").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("mail-auth").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("mail-from").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("mail-rcpt").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("mail-rcpt-allowfails").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("M manual").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("max-filesize").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("max-redirs").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("metalink").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("mptcp").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("n netrc").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("netrc-file").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("netrc-optional").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("no-alpn").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("N no-buffer").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("no-clobber").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("no-keepalive").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("no-npn").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("no-progress-meter").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("no-sessionid").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("noproxy").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ntlm-wb").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("Z parallel").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("parallel-immediate").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("parallel-max").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("pass").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("path-as-is").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("pinnedpubkey").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("post301").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("post302").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("post303").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("preproxy").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proto").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proto-default").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proto-redir").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-anyauth").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proxy-ca-native").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proxy-cacert").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-capath").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-cert").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-cert-type").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-ciphers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-crlfile").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-digest").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proxy-header").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-http2").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proxy-insecure").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proxy-key").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-key-type").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-negotiate").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proxy-pass").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-pinnedpubkey").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-service-name").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-ssl-allow-beast").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proxy-ssl-auto-client-cert").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proxy-tls13-ciphers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-tlsauthtype").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-tlspassword").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-tlsuser").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("proxy-tlsv1").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("proxy1.0").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("p proxytunnel").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("pubkey").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("Q quote").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("random-file").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("r range").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("rate").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("raw").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("e referer").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("J remote-header-name").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("R remote-time").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("remove-on-error").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("request-target").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("resolve").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("retry-all-errors").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("retry-connrefused").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("retry-delay").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("sasl-authzid").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("sasl-ir").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("service-name").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("S show-error").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("i show-headers").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("s silent").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("skip-existing").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("socks4").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("socks4a").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("socks5").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("socks5-basic").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("socks5-gssapi").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("socks5-gssapi-nec").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("socks5-gssapi-service").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("socks5-hostname").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("Y speed-limit").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("y speed-time").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("ssl").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ssl-allow-beast").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ssl-auto-client-cert").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ssl-no-revoke").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ssl-reqd").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("ssl-revoke-best-effort").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("2 sslv2").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("3 sslv3").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("stderr").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("styled-output").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("suppress-connect-headers").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("tcp-fastopen").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("tcp-nodelay").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("t telnet-option").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("tftp-blksize").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("tftp-no-options").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("z time-cond").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("tls-earlydata").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("tls-max").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("tls13-ciphers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("tlsauthtype").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("tlspassword").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("tlsuser").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("1 tlsv1").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("tlsv1.0").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("tlsv1.1").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("tlsv1.2").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("tlsv1.3").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("tr-encoding").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("trace").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("trace-ascii").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("trace-config").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("trace-ids").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("trace-time").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("unix-socket").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("B use-ascii").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("variable").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("v verbose").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("V version").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпцию("vlan-priority").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("w write-out").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпцию("xattr").ТМассивБулево();				

	Возврат КонсольноеПриложение;

КонецФункции

Функция ДобавитьНеподдерживаемуюОпцию(Наименования)
	Возврат ДобавитьОпциюВКонсольноеПриложение(Наименования, Ложь);
КонецФункции

Функция ДобавитьПоддерживаемуюОпцию(Наименования, Описание = "")
	Возврат ДобавитьОпциюВКонсольноеПриложение(Наименования, Истина, Описание);
КонецФункции

Функция ДобавитьОпциюВКонсольноеПриложение(Наименования, Поддерживается, Описание = "")
	Опция = КонсольноеПриложение.Опция(Наименования, , Описание);
	
	Описание = Новый Структура();
	Описание.Вставить("Поддерживается", Поддерживается);
	Описание.Вставить("Наименования", Новый Массив());

	Для Каждого Имя Из СтрРазделить(Наименования, " ") Цикл 
		Наименование = ?(СтрДлина(Имя) = 1, "-", "--") + Имя;
		Описание.Наименования.Добавить(Наименование);
		ОписаниеОпций.Вставить(Имя, Описание);
	КонецЦикла;

	Возврат Опция;
КонецФункции

Процедура ОбработатьАргументыКоманды(АргументыКоманды, НомерКоманды, КоличествоКоманд)

	ПроверитьЧтоКомандаНачинаетсяСCurl(АргументыКоманды, НомерКоманды, КоличествоКоманд);
		
	АргументыКоманды.Удалить(0); // Удаляем curl

	Попытка
		Приложение = ПолучитьКонсольноеПриложение();
		Команда = Приложение.ПолучитьКоманду();
		Команда.УстановитьДействиеВывестиСправку(ЭтотОбъект, "Заглушка");
		Приложение.Запустить(АргументыКоманды);
	Исключение
		ОбработатьИсключениеЗапускаКонсольногоПриложения(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

Процедура ОбработатьИсключениеЗапускаКонсольногоПриложения(ИнформацияОбОшибке)

	Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

	// Неожидаемая опция
	ПодстрокаПоиска = "Неожидаемая опция";
	Инд = СтрНайти(Текст, ПодстрокаПоиска);
	Если Инд Тогда
		Опция = СокрЛП(Сред(Текст, Инд + СтрДлина(ПодстрокаПоиска)));
		ТекстОшибки = СтрШаблон("Опция %1 неизвестна", Опция);
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	// Опция должна содержать значение
	ПодстрокаПоиска = "должна содержать значение";
	Инд = СтрНайти(Текст, ":");
	Если СтрНайти(Текст, ПодстрокаПоиска) И Инд Тогда
		ТекстОшибки = СокрЛП(Сред(Текст, Инд + 1));
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(Текст));

КонецПроцедуры

Процедура ДополнитьОшибкиНеподдерживаемыеОпции()

	ПоддерживаемыеОпцииГенератора = Новый Соответствие();
	
	Для Каждого ИмяОпции Из Генератор.ПоддерживаемыеОпции() Цикл
		Префикс = ?(СтрДлина(ИмяОпции) = 1, "-", "--");
		ПоддерживаемыеОпцииГенератора.Вставить(Префикс + ИмяОпции, Истина);
	КонецЦикла;

	ПроверенныеОпции = Новый Соответствие();
	Для Каждого КлючЗначение Из ОписаниеОпций Цикл
		
		Описание = КлючЗначение.Значение;	
		Наименование = Описание.Наименования[0];

		ПоддерживаетсяГенератором = ПоддерживаемыеОпцииГенератора[Наименование] = Истина;
		Если Описание.Поддерживается И ПоддерживаетсяГенератором Тогда
			Продолжить;
		КонецЕсли;

		Если ПроверенныеОпции[Наименование] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПроверенныеОпции.Вставить(Наименование, Истина);

		Значение = ЗначениеОпции(Наименование);
		Если ЗначениеЗаполнено(Значение) Тогда
			ТекстОшибки = СтрШаблон("Опция %1 не поддерживается", СтрСоединить(Описание.Наименования, ", "));
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяОшибка(ТекстОшибки));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЧтоКомандаНачинаетсяСCurl(АргументыКоманды, НомерКоманды, КоличествоКоманд)
	
	Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
		Возврат;
	КонецЕсли;

	Если Не (НРег(АргументыКоманды[0]) = "curl") Тогда

		НомерКомандыТекст = ?(КоличествоКоманд > 1, СтрШаблон("#%1 ", НомерКоманды), "");

		Текст = СтрШаблон("Команда %1должна начинаться с ""curl"", но вместо этого начинается с %2", 
			НомерКомандыТекст, 
			АргументыКоманды[0]);

		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(Текст));

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНаличиеURL(ОписаниеЗапроса)
	
	Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
		Возврат;
	КонецЕсли;

	Если ОписаниеЗапроса.АдресаРесурсов.Количество() = 0 Тогда
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка("Не указан URL"));
		Возврат;
	КонецЕсли;

	ПорядковыйНомер = 0;
	Для Каждого ОписаниеРесурса Из ОписаниеЗапроса.АдресаРесурсов Цикл
		ПорядковыйНомер = ПорядковыйНомер + 1;
		Если Не ЗначениеЗаполнено(ОписаниеРесурса.URL) Тогда
			ТекстОшибки = СтрШаблон("Не указан URL #%1", ПорядковыйНомер);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьПоддержкуПротокола(ОписаниеЗапроса, ПоддерживаемыеПротоколы)
	
	Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ОписаниеРесурса Из ОписаниеЗапроса.АдресаРесурсов Цикл
		СтруктураURL = Новый ПарсерURL(ОписаниеРесурса.URL);
		Если ПоддерживаемыеПротоколы.Найти(СтруктураURL.Схема) = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Протокол ""%1"" не поддерживается", СтруктураURL.Схема);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));		
		КонецЕсли;
 	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьДанные()

	ШаблонОдновременнаяПередача = "Одновременная передача опций %1 и %2 запрещена";

	Если ЕстьОпцииГруппыData() И ЕстьОпцииГруппыForm() Тогда
		ТекстОшибки = СтрШаблон(ШаблонОдновременнаяПередача, "-d (--data)", "-F (--form)");
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	Если ЕстьОпцииГруппыForm() И УстановленФлагОпции( "head") Тогда
		ТекстОшибки = СтрШаблон(ШаблонОдновременнаяПередача, "-I (--head)", "-F (--form)");
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	Если ЕстьОпции("upload-file") И ЕстьОпцииГруппыForm() Тогда
		ТекстОшибки = СтрШаблон(ШаблонОдновременнаяПередача, "-T (--upload-file)", "-F (--form)");
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиРазделительКоманд(Результат, НомерКоманды, КоличествоКоманд)

	Если КоличествоКоманд = 1 Тогда
		Возврат;
	КонецЕсли;

	ПакетРесурсов = МенеджерРесурсовЛокализации.ПолучитьПакет("Общий", КодЛокализации);

	Результат = Результат
		+ ?(НомерКоманды > 1, Символы.ПС + Символы.ПС, "")
		+ СтрШаблон(
			"//////////////////////////////////////////////
			|// %1 #%2.", ПакетРесурсов.ПолучитьСтроку("Текст.Команда"), НомерКоманды);

КонецПроцедуры

Процедура ВывестиСгенерированныйКодКоманды(Результат, Код, НомерКоманды, КоличествоКоманд)
	
	Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
		Возврат;
	КонецЕсли;

	ВывестиРазделительКоманд(Результат, НомерКоманды, КоличествоКоманд);

	Результат = Результат 
		+ ?(Результат = "", "", Символы.ПС + Символы.ПС)
		+ Код;

КонецПроцедуры

Функция ЕстьОпции(Опции)
	Для Каждого Опция Из СтрРазделить(Опции, ",") Цикл
		Если ЗначениеЗаполнено(ЗначениеОпции(Опция)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ЕстьОпцииГруппыData()
	Возврат ЕстьОпции("d,data,data-raw,data-binary,data-urlencode,data-ascii,json");
КонецФункции

Функция ЕстьОпцииГруппыForm()
	Возврат ЕстьОпции("F,form,form-string");
КонецФункции

Функция УстановленФлагОпции(ИмяОпции)
	Значение = ПоследнееЗначениеОпции(ИмяОпции);
	Если Не Значение = Неопределено Тогда
		Возврат Значение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПоследнееЗначениеОпции(ИмяОпции)
	Значение = ЗначениеОпции(ИмяОпции);
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Если Значение.Количество() Тогда
			Возврат Значение[Значение.ВГраница()];
		КонецЕсли;
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции

Функция ЗначениеОпции(ИмяОпции)
	Возврат ТекущаяКоманда.ЗначениеОпции(ИмяОпции);
КонецФункции

Функция MIMEТипПоРасширениюФайла(Расширение)

	Если MIMEТипыРасширенийФайлов = Неопределено Тогда
		MIMEТипыРасширенийФайлов = Новый Соответствие();
		MIMEТипыРасширенийФайлов.Вставить(".gif", "image/gif");
		MIMEТипыРасширенийФайлов.Вставить(".jpg", "image/jpeg");
		MIMEТипыРасширенийФайлов.Вставить(".jpeg", "image/jpeg");
		MIMEТипыРасширенийФайлов.Вставить(".png", "image/png");
		MIMEТипыРасширенийФайлов.Вставить(".svg", "image/svg+xml");
		MIMEТипыРасширенийФайлов.Вставить(".txt", "text/plain");
		MIMEТипыРасширенийФайлов.Вставить(".htm", "text/html");
		MIMEТипыРасширенийФайлов.Вставить(".html", "application/pdf");
		MIMEТипыРасширенийФайлов.Вставить(".xml", "application/xml");
	КонецЕсли;

	Возврат MIMEТипыРасширенийФайлов[НРег(Расширение)];

КонецФункции

// Используется для отключения вывода справки cli
Процедура Заглушка(Значение = Неопределено) Экспорт
	
КонецПроцедуры

#КонецОбласти