#Использовать tokenizer

Перем Спецификация; // Массив
Перем МассивПараметров; // Массив из Структура:
                        //  * Имя - Строка - Имя параметра
				        //  * Значение - Строка, Неопределено - значение параметра
Перем ИмяПараметра; // Строка
Перем БылРазделитель; // Булево
Перем ЗначениеПараметра; // Строка, Неопределено

#Область ПрограммныйИнтерфейс

// Парсит значение опции -F (--form)
//
// Параметры:
//   Строка - Строка - Значение опции
//
// Возвращаемое значение:
//   Структура:
//     * ИмяПоля - Строка - Имя поля
//     * Значение - Строка - Значение поля
//     * Параметры - Соответствие из КлючИЗначение:
//         ** Ключ - Строка - Имя параметра. Например: type, filename, headers
//         ** Значение - Строка, Соответствие - Значение параметра. Тип Соответствие только для параметра headers
Функция Распарсить(Строка) Экспорт
	
	МассивПараметров = Новый Массив();
	
	Токенайзер = Новый Токенайзер(Спецификация);
	Токенайзер.Инит(Строка);

	ИмяПараметра = "";
	ЗначениеПараметра = Неопределено;
	ОткрытаДвойнаяКавычка = Ложь;
	БылРазделитель = Ложь;

	Пока Токенайзер.ЕстьЕщеТокены() Цикл

		Токен = Токенайзер.СледующийТокен();

		Если Токен = Неопределено Тогда
			Прервать;
		КонецЕсли;

		ТипТокена = Токен.ТипТокена();

		Если ТипТокена = "ДвойнаяКавычка" Тогда
			ОткрытаДвойнаяКавычка = Не ОткрытаДвойнаяКавычка;

			Если Не ОткрытаДвойнаяКавычка Тогда
				ПроверитьИДобавитьПараметр();
			КонецЕсли;	
		ИначеЕсли ОткрытаДвойнаяКавычка Или ТипТокена = "Строка" Тогда
			ДополнитьЗначениемТокена(Токен);		
		ИначеЕсли ТипТокена = "ТочкаСЗапятой" Тогда
			ПроверитьИДобавитьПараметр();
		ИначеЕсли ТипТокена = "Равенство" Тогда
			Если БылРазделитель Тогда
				ДополнитьЗначениемТокена(Токен);
			Иначе
				БылРазделитель = Истина;
				ЗначениеПараметра = "";
			КонецЕсли;
		Иначе
			ВызватьИсключение "Ошибка при парсинге значения опции -F, --form";
		КонецЕсли;

	КонецЦикла;

	ПроверитьИДобавитьПараметр();

	Возврат ПодготовитьРезультат();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриСозданииОбъекта()

	Спецификация = Новый Массив();
	Спецификация.Добавить(Новый СпецификацияТокенСимвол("""", "ДвойнаяКавычка"));
	Спецификация.Добавить(Новый СпецификацияТокенСимвол(";", "ТочкаСЗапятой"));
	Спецификация.Добавить(Новый СпецификацияТокенСимвол("=", "Равенство"));
	Спецификация.Добавить(Новый СпецификацияТокенРегулярноеВыражение(Новый РегулярноеВыражение("[^=;""]+"), "Строка")); 
	
КонецПроцедуры

Функция ПодготовитьРезультат()

	Результат = Новый Структура("ИмяПоля, Значение, Параметры", "", "", Новый Соответствие());
	
	Если МассивПараметров.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Результат.ИмяПоля = СокрЛП(МассивПараметров[0].Имя);
	Результат.Значение = СокрЛП(МассивПараметров[0].Значение);
	Результат.Параметры.Вставить("headers", Новый Соответствие());

	Если ПустаяСтрока(Результат.ИмяПоля) Тогда
		Результат.ИмяПоля = "null";
	КонецЕсли;

	Для Индекс = 1 По МассивПараметров.ВГраница() Цикл
		Параметр = МассивПараметров[Индекс];
		
		Имя = НРег(СокрЛП(Параметр.Имя));
		Значение = СокрЛП(Параметр.Значение);

		Если Имя = "headers" Тогда
			ДобавитьЗаголовок(Результат.Параметры["headers"], Значение);
		Иначе
			Результат.Параметры.Вставить(Имя, Значение);
		КонецЕсли;	
	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ДобавитьЗаголовок(Заголовки, СтрокаЗаголовка)

	ПозицияДвоеточия = СтрНайти(СтрокаЗаголовка, ":");

	Если ПозицияДвоеточия Тогда
		Имя = Сред(СтрокаЗаголовка, 1, ПозицияДвоеточия - 1);
		Значение = СокрЛП(Сред(СтрокаЗаголовка, ПозицияДвоеточия + 1));
	Иначе
		Имя = СтрокаЗаголовка;
		Значение = "";
	КонецЕсли;

	Заголовки.Вставить(Имя, Значение);

КонецПроцедуры

Процедура ДополнитьЗначениемТокена(Токен)

	Если БылРазделитель Тогда

		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		КонецЕсли;
		
		ЗначениеПараметра = ЗначениеПараметра + Токен.Значение();

	Иначе

		ИмяПараметра = ИмяПараметра + Токен.Значение();

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьИДобавитьПараметр()
	
	Если Не БылРазделитель Тогда
		Возврат;
	КонецЕсли;

	МассивПараметров.Добавить(Новый Структура("Имя, Значение", ИмяПараметра, СокрЛП(ЗначениеПараметра)));

	ИмяПараметра = "";
	БылРазделитель = Ложь;
	ЗначениеПараметра = Неопределено;

КонецПроцедуры

#КонецОбласти