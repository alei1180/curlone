Перем _Результат; // Массив из Строка
Перем _ИменаПеременных; // Соответствие
Перем _ХешИменаПеременных; // Соответствие
Перем _РегулярноеВыражениеПараметра; // РегулярноеВыражение

#Область ПрограммныйИнтерфейс

// Возвращает сформированный программный код
// 
// Возвращаемое значение:
//   Строка
Функция ПолучитьРезультат() Экспорт
	Возврат СокрЛП(СтрСоединить(_Результат));
КонецФункции

// Проверяет, является ли результат пустым
// 
// Возвращаемое значение:
//   Булево
Функция Пустой() Экспорт
	Возврат _Результат.Количество() = 0;
КонецФункции

// Очищает весь накопленный код
// 
// Возвращаемое значение:
//   ЭтотОбъект - Текущий объект для цепочки вызовов
Функция Очистить() Экспорт
	_Результат.Очистить();
	Возврат ЭтотОбъект;
КонецФункции

// Добавляет строку кода с подстановкой параметров
//
// Поддерживает замену плейсхолдеров %1, %2, %3 на переданные значения
// 
// Параметры:
//   Строка - Строка - текст строки кода с плейсхолдерами
//   Значение1 - Произвольный - Значение для подстановки вместо %1
//   Значение2 - Произвольный - Значение для подстановки вместо %2
//   Значение3 - Произвольный - Значение для подстановки вместо %3
// 
// Возвращаемое значение:
//   ЭтотОбъект - Текущий объект для цепочки вызовов
Функция ДобавитьСтроку(Строка, 
	Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено) Экспорт

	ОбработаннаяСтрока = СтрШаблон(
		Строка, 
		ОбработатьПараметрыВСтроке(Значение1), 
		ОбработатьПараметрыВСтроке(Значение2), 
		ОбработатьПараметрыВСтроке(Значение3)
	);

	_Результат.Добавить(Символы.ПС);
	_Результат.Добавить(ОбработаннаяСтрока);

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет однострочный комментарий
//
// Поддерживает замену плейсхолдеров %1, %2, %3 на переданные значения
// Автоматически добавляет префикс "//" к тексту комментария
// 
// Параметры:
//   Строка - Строка - текст комментария
//   Значение1 - Произвольный - Значение для подстановки вместо %1
//   Значение2 - Произвольный - Значение для подстановки вместо %2
//   Значение3 - Произвольный - Значение для подстановки вместо %3
// 
// Возвращаемое значение:
//   ЭтотОбъект - Текущий объект для цепочки вызовов
Функция ДобавитьКомментарий(Строка, 
	Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено) Экспорт

	Возврат ДобавитьСтроку("// " + Строка, Значение1, Значение2, Значение3);

КонецФункции

// Добавляет пустую строку в код
// 
// Параметры:
//   ТолькоПриОтсутствии - Булево - Если Истина, пустая строка добавляется только
//                                  в случае, если последняя добавленная строка непустая
//                                  (по умолчанию Истина)
// 
// Возвращаемое значение:
//   ЭтотОбъект - Текущий объект для цепочки вызовов
Функция ДобавитьПустуюСтроку(ТолькоПриОтсутствии = Истина) Экспорт

	ИндексПоследнего = _Результат.ВГраница();

	Если ИндексПоследнего >= 0 И Не _Результат[ИндексПоследнего] = Символы.ПС 
		Или Не ТолькоПриОтсутствии Тогда
		_Результат.Добавить(Символы.ПС);
	КонецЕсли;

	Возврат ЭтотОбъект;

КонецФункции

// Преобразует массив параметров функции в строку с форматированием
//
// Автоматически определяет необходимость переноса параметров на новые строки
// при превышении длины в 110 символов. Отбрасывает незаполненные параметры в конце списка
// 
// Параметры:
//   ПараметрыФункции - Массив - Список параметров для преобразования в строку
// 
// Возвращаемое значение:
//   Строка
Функция ПараметрыФункцииВСтроку(ПараметрыФункции) Экспорт
	
	ПараметрыСтрокой = "";
	МаксимальнаяДлинаВсехПараметровВОднойСтроке = 110;

	ДлинаПараметров = СтрДлина(СтрСоединить(ПараметрыФункции, ", ")) ;
	ПереноситьКаждыйПараметр = ДлинаПараметров > МаксимальнаяДлинаВсехПараметровВОднойСтроке;

	Если ПереноситьКаждыйПараметр Тогда
		Разделитель = "," + Символы.ПС + Символы.Таб;
	Иначе
		Разделитель = ", ";
	КонецЕсли;

	КоличествоПараметров = ПараметрыФункции.Количество();

	ЕстьЗаполненный = Ложь;
	Для Инд = 1 По КоличествоПараметров Цикл
		
		Значение = ПараметрыФункции[КоличествоПараметров - Инд];

		Если ТипЗнч(Значение) <> Тип("Строка") Тогда
			Значение = ПараметрВСтроку(Значение);
		КонецЕсли;

		Если Не ЕстьЗаполненный И Не ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;

		ПараметрыСтрокой = Значение + ?(ПараметрыСтрокой = "", "", Разделитель) + ПараметрыСтрокой;

		ЕстьЗаполненный = Истина;

	КонецЦикла;

	Возврат СокрЛП(ПараметрыСтрокой);

КонецФункции

// Преобразует значение в строковое представление для кода
//
// Поддерживаемые типы: Строка, Число, Булево, Дата
// Для строк выполняется экранирование кавычек и обработка переменных окружения
// 
// Параметры:
//   Значение - Произвольный - Значение для преобразования
// 
// Возвращаемое значение:
//   Строка
Функция ПараметрВСтроку(Значение) Экспорт

	Тип = ТипЗнч(Значение);
	Если Тип = Тип("Строка") Тогда

		Результат = ЭкранироватьКавычки(Значение);
		Результат = СтрШаблон("""%1""", Результат);
		Результат = ОбработатьПараметрыВСтроке(Результат);

		Возврат Результат;

	ИначеЕсли Тип = Тип("Число") Тогда

		Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");

	ИначеЕсли Тип = Тип("Булево") Тогда

		Возврат Формат(Значение, "БЛ=Ложь; БИ=Истина");

	ИначеЕсли Тип = Тип("Дата") Тогда

		Если НачалоДня(Значение) = Значение Тогда
			Возврат Формат(Значение, "ДФ='''Дата(''yyyy, M, d'')'''");
		Иначе
			Возврат Формат(Значение, "ДФ='''Дата(''yyyy, M, d, H, m, s'')'''");
		КонецЕсли;

	Иначе

		Возврат "";

	КонецЕсли;

КонецФункции

// Преобразует необязательный параметр метода в строку
// 
// Параметры:
//   Значение - Произвольный - Значение для преобразования
// 
// Возвращаемое значение:
//   Строка
Функция НеобязательныйПараметрВСтроку(Значение) Экспорт

	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат ПараметрВСтроку(Значение);
	КонецЕсли;

	Возврат "";

КонецФункции

// Добавляет код создания соответствия и заполнения его элементами
//
// Рекурсивно обрабатывает вложенные структуры (соответствия и массивы)
// 
// Параметры:
//   Соответствие - Соответствие - Соответствие для преобразования в код
//   ИмяПараметра - Строка - Имя переменной для созданного соответствия
// 
// Возвращаемое значение:
//   ЭтотОбъект - Текущий объект для цепочки вызовов
Функция ДобавитьСоответствие(Соответствие, ИмяПараметра) Экспорт
	
	ДобавитьСтроку("%1 = Новый Соответствие();", ИмяПараметра);

	ДобавитьЭлементыСоответствия(Соответствие, ИмяПараметра);

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет код для заполнения соответствия элементами
//
// Рекурсивно обрабатывает вложенные соответствия и массивы
// 
// Параметры:
//   Соответствие - Соответствие - Cоответствие для обхода элементов
//   ИмяПараметра - Строка - Имя переменной соответствия
// 
// Возвращаемое значение:
//   ЭтотОбъект - Текущий объект для цепочки вызовов
Функция ДобавитьЭлементыСоответствия(Соответствие, ИмяПараметра) Экспорт
	
	Для Каждого КлючИЗначение Из Соответствие Цикл

		ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
		Если ТипЗначения = Тип("Соответствие") Тогда

			ДобавитьСтроку(
				"%1.{t(Соответствие.Вставить)}(%2, Новый Соответствие());",
				ИмяПараметра,
				ПараметрВСтроку(КлючИЗначение.Ключ)
			);

			Путь = СтрШаблон("%1[""%2""]", ИмяПараметра, КлючИЗначение.Ключ);
			ДобавитьЭлементыСоответствия(КлючИЗначение.Значение, Путь);

		ИначеЕсли ТипЗначения = Тип("Массив") Тогда

			ДобавитьСтроку(
				"%1.{t(Соответствие.Вставить)}(%2, Новый Массив());",
				ИмяПараметра,
				ПараметрВСтроку(КлючИЗначение.Ключ)
			);

			Путь = СтрШаблон("%1[""%2""]", ИмяПараметра, КлючИЗначение.Ключ);
			ДобавитьЭлементыМассива(КлючИЗначение.Значение, Путь);

		Иначе
		
			МассивПараметров = Новый Массив();
			МассивПараметров.Добавить(ПараметрВСтроку(КлючИЗначение.Ключ));
			МассивПараметров.Добавить(ПараметрВСтроку(КлючИЗначение.Значение));

			ДобавитьСтроку(
				"%1.{t(Соответствие.Вставить)}(%2);",
				ИмяПараметра,
				ПараметрыФункцииВСтроку(МассивПараметров)
			);

		КонецЕсли;

	КонецЦикла;

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет код создания массива и заполнения его элементами
//
// Рекурсивно обрабатывает вложенные структуры (соответствия и массивы)
// 
// Параметры:
//   Массив - Массив - Массив для преобразования в код
//   ИмяПараметра - Строка - Имя переменной для созданного массива
// 
// Возвращаемое значение:
//   ЭтотОбъект - Текущий объект для цепочки вызовов
Функция ДобавитьМассив(Массив, ИмяПараметра) Экспорт
	
	ДобавитьСтроку("%1 = Новый Массив();", ИмяПараметра);

	ДобавитьЭлементыМассива(Массив, ИмяПараметра);

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет код для заполнения массива элементами
//
// Рекурсивно обрабатывает вложенные соответствия и массивы
// 
// Параметры:
//   Массив - Массив - Массив для обхода элементов
//   ИмяПараметра - Строка - Имя переменной массива
// 
// Возвращаемое значение:
//   ЭтотОбъект - Текущий объект для цепочки вызовов
Функция ДобавитьЭлементыМассива(Массив, ИмяПараметра) Экспорт

	ИндексЭлемента = 0;

	Для Каждого Значение Из Массив Цикл

		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения = Тип("Соответствие") Тогда

			ДобавитьСтроку("%1.{t(Массив.Добавить)}(Новый Соответствие());", ИмяПараметра);

			Путь = СтрШаблон("%1[%2]", ИмяПараметра, Формат(ИндексЭлемента, "ЧН=0; ЧГ="));
			ДобавитьЭлементыСоответствия(Значение, Путь);

		ИначеЕсли ТипЗначения = Тип("Массив") Тогда

			ДобавитьСтроку("%1.{t(Массив.Добавить)}(Новый Массив());", ИмяПараметра);

			Путь = СтрШаблон("%1[%2]", ИмяПараметра, Формат(ИндексЭлемента, "ЧН=0; ЧГ="));
			ДобавитьЭлементыМассива(Значение, Путь);

		Иначе

			ДобавитьСтроку("%1.{t(Массив.Добавить)}(%2);", ИмяПараметра, ПараметрВСтроку(Значение));

		КонецЕсли;

		ИндексЭлемента = ИндексЭлемента + 1;

	КонецЦикла;

	Возврат ЭтотОбъект;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриСозданииОбъекта(ИменаПеременных = Неопределено)

	_Результат = Новый Массив();
	_РегулярноеВыражениеПараметра = Новый РегулярноеВыражение("(?:\$|%24)ENV_([0-9a-fA-F]{10})");

	ИнициализироватьИменаПеременных(ИменаПеременных);
	
КонецПроцедуры

Процедура ИнициализироватьИменаПеременных(ИменаПеременных)

	_ИменаПеременных = Новый Соответствие();
	_ХешИменаПеременных = Новый Соответствие();

	Если ИменаПеременных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Имя Из ИменаПеременных Цикл
		
		ХешСтрока = ОбщийНаборИнструментов.ХешСтрокаИмениПеременной(Имя);

		_ИменаПеременных[Имя] = Истина;
		_ХешИменаПеременных[ХешСтрока] = Имя;

	КонецЦикла;

КонецПроцедуры

Функция ЭкранироватьКавычки(Знач Строка)
	Строка = СтрЗаменить(Строка, """", """""");
	Строка = СтрЗаменить(Строка, Символы.ПС, Символы.ПС + "|");
	Возврат Строка;
КонецФункции

Функция ОбработатьПараметрыВСтроке(Строка)

	Если _ИменаПеременных.Количество() = 0
		Или Не СтрНайти(Строка, "ENV_") Тогда
		Возврат Строка;
	КонецЕсли;

	Результат = Новый Массив();

	Кавычка = """";
	ЕстьКавычкаВНачале = СтрНачинаетсяС(Строка, Кавычка);
	ЕстьКавычкаВКонце = СтрЗаканчиваетсяНа(Строка, Кавычка);

	Если ЕстьКавычкаВНачале И ЕстьКавычкаВКонце Тогда
		РабочаяСтрока = Сред(Строка, 2, СтрДлина(Строка) - 2);
	ИначеЕсли ЕстьКавычкаВНачале Тогда
		РабочаяСтрока = Сред(Строка, 2);
	ИначеЕсли ЕстьКавычкаВКонце Тогда
		РабочаяСтрока = Сред(Строка, 1, СтрДлина(Строка) - 1);
	Иначе
		РабочаяСтрока = Строка;
	КонецЕсли;

	КоллекцияСовпадений = _РегулярноеВыражениеПараметра.НайтиСовпадения(РабочаяСтрока);
	Если КоллекцияСовпадений.Количество() = 0 Тогда
		Возврат Строка;
	КонецЕсли;

	ДлинаСтроки = СтрДлина(РабочаяСтрока);
	ПредыдущаяПозиция = 0;
	ПеременнаяВНачале = Ложь;
	ПеременнаяВКонце = Ложь;

	Для Каждого Совпадение Из КоллекцияСовпадений Цикл

		ХешКод = Совпадение.Группы[1].Значение;
		Имя = _ХешИменаПеременных[ХешКод];
		Если Имя = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВНачале = Совпадение.Индекс = 0;
		ВКонце = Совпадение.Индекс + Совпадение.Длина = ДлинаСтроки;
		СледомЗаПредыдущим = Совпадение.Индекс = ПредыдущаяПозиция И Не ВНачале;
		ПеременнаяВНачале = ПеременнаяВНачале Или ВНачале;
		ПеременнаяВКонце = ПеременнаяВКонце Или ВКонце;

		Если СледомЗаПредыдущим Тогда
			Результат.Удалить(Результат.ВГраница());
		КонецЕсли;

		Если Не СледомЗаПредыдущим И Совпадение.Индекс > 0 Тогда
			ДобавочныйИндекс = ?(Совпадение.Индекс = 0, 0, 1);
			Результат.Добавить(Сред(РабочаяСтрока, ПредыдущаяПозиция + ДобавочныйИндекс, Совпадение.Индекс - ПредыдущаяПозиция));	
		КонецЕсли;
		
		Если Не ВНачале Тогда
			Результат.Добавить(?(СледомЗаПредыдущим, "", Кавычка) + " + ");
		КонецЕсли;

		Результат.Добавить(Имя);

		Если Не ВКонце Тогда
			Результат.Добавить(" + " + Кавычка);
		КонецЕсли;

		ПредыдущаяПозиция = Совпадение.Индекс + Совпадение.Длина;

	КонецЦикла;

	Если ПредыдущаяПозиция < ДлинаСтроки Тогда
		Результат.Добавить(Прав(РабочаяСтрока, ДлинаСтроки - ПредыдущаяПозиция) + Кавычка);
	КонецЕсли;

	Результат = СтрСоединить(Результат);

	Если ЕстьКавычкаВНачале И Не ПеременнаяВНачале Тогда
		Результат = Кавычка + Результат;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти