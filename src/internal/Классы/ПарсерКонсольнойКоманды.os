#Использовать tokenizer

Перем АргументыКоманд; // Массив из Строка
Перем Переменные; // Массив из Строка
Перем Спецификация; // Массив
Перем Токенайзер; // Токенайзер
Перем ОткрытаКавычкаСПоддержкойИнтерполяции; // Булево
Перем ОткрытаКавычкаБезПоддержкиИнтерполяции; // Булево
Перем ЭкранироватьСимвол; // Булево
Перем ОтменитьЭкранированиеСимвола; // Булево
Перем НакопленнаяСтрока; // Строка
Перем НачатьНовуюКоманду; // Булево
Перем ЭтоНовыйАргумент; // Булево

#Область ПрограммныйИнтерфейс

// Парсит команду bash в массив аргументов
//
// Параметры:
//   Команда - Строка - Команда
//
// Возвращаемое значение:
//   Структура:
//     * АргументыКоманд - Массив из Строка
//     * ИменаПеременных - Массив из Строка
Функция Распарсить(Команда) Экспорт
	
	АргументыКоманд = Новый Массив;
	Переменные = Новый Массив;

	ОткрытаКавычкаСПоддержкойИнтерполяции = Ложь;
	ОткрытаКавычкаБезПоддержкиИнтерполяции = Ложь;
	ЭкранироватьСимвол = Ложь;
	ОтменитьЭкранированиеСимвола = Ложь;
	НачатьНовуюКоманду = Ложь;
	ЭтоНовыйАргумент = Истина;

	ОчиститьНакопительнуюСтроку();

	Токенайзер = Новый Токенайзер(Спецификация);
	Токенайзер.Инит(Команда);

	Пока Токенайзер.ЕстьЕщеТокены() Цикл

		Токен = ПолучитьСледующийТокен();
		Если Токен = Неопределено Тогда
			ДобавитьАргумент();
			Прервать;
		КонецЕсли;

		РазобратьАргумент(Токен);

	КонецЦикла;

	УдалитьПустуюПоследнююКоманду();

	Возврат Новый Структура("АргументыКоманд, ИменаПеременных", АргументыКоманд, Переменные);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриСозданииОбъекта()

	Спецификация = Спецификация();

КонецПроцедуры

Функция Спецификация()

	СимволЭкранирования = "\";
	КавычкаСПоддержкойИнтерполяции = """";
	КавычкаБезПоддержкиИнтерполяции = "'";

	Спецификация = Новый Массив();
	Спецификация.Добавить(Новый СпецификацияТокенСимвол(СимволЭкранирования, "СимволЭкранирования"));
	Спецификация.Добавить(Новый СпецификацияТокенСимвол(КавычкаСПоддержкойИнтерполяции, "КавычкаСПоддержкойИнтерполяции"));
	Спецификация.Добавить(Новый СпецификацияТокенСимвол(КавычкаБезПоддержкиИнтерполяции, "КавычкаБезПоддержкиИнтерполяции"));
	Спецификация.Добавить(Новый СпецификацияТокенСимвол(Символы.ПС, "ПереносСтроки"));
	Спецификация.Добавить(ОбщийНаборИнструментов.ТокенРегулярноеВыражение(
		"^\$(?:[a-zA-Z_][a-zA-Z0-9_]*|\{[a-zA-Z_][a-zA-Z0-9_]*\})",
		"Переменная"
	));
	Спецификация.Добавить(ОбщийНаборИнструментов.ТокенРегулярноеВыражение(
		"^(?:&&|\|\||[;&])",
		"ОператорСвязыванияКоманд"
	));
	Спецификация.Добавить(ОбщийНаборИнструментов.ТокенРегулярноеВыражение(
		"^\s",
		"ПробельныйСимвол"
	));
	Спецификация.Добавить(ОбщийНаборИнструментов.ТокенРегулярноеВыражение(
		"^[^'"";&\$|\\\s]+",
		"СтрокаБезСлужебныхСимволов"
	)); 
	Спецификация.Добавить(ОбщийНаборИнструментов.ТокенРегулярноеВыражение(
		"^[&\$|]",
		"СлужебныеСимволы"
	));
	
	Возврат Спецификация;

КонецФункции

Процедура РазобратьАргумент(Токен)

	Если НачатьНовуюКоманду Тогда

		Если Токен.ТипТокена() = "ОператорСвязыванияКоманд" Тогда
			Возврат;
		КонецЕсли;	

		ДобавитьАргумент();
		ДобавитьНовуюКоманду();

	КонецЕсли;

	НеобходимоПропуститьПробельныеСимволы = Не Токен = Неопределено 
		И Не ОткрытаКавычка() 
		И ЭтоРазделительАргументов(Токен);

	Если НеобходимоПропуститьПробельныеСимволы Тогда
		ДобавитьАргумент();
		ЭтоНовыйАргумент = Истина;
		Возврат;
	КонецЕсли;

	ДополнитьНакопительнуюСтроку(Токен.Значение());
	ДобавитьАргумент();

КонецПроцедуры

Функция ЭтоРазделительАргументов(Токен)
	
	ПервыйСимвол = Лев(Токен.Значение(), 1);

	Возврат Не ОткрытаКавычка()
		И Не ЭкранироватьСимвол
		И ЭтоПробельныйСимвол(ПервыйСимвол);

КонецФункции

Функция ПолучитьСледующийТокен()

	Токен = Токенайзер.СледующийТокен();

	Если Токен = Неопределено Тогда
		Возврат Токен;
	КонецЕсли;

	ОтменитьЭкранированиеПриНеобходимости(Токен);

	Если Токен.ТипТокена() = "ПереносСтроки" Тогда

		Если ОткрытаКавычка() Тогда
			Возврат Токен;
		КонецЕсли;

		Если Не ЭкранироватьСимвол Тогда
			НачатьНовуюКоманду = Истина;		
		КонецЕсли;

		Возврат ПолучитьСледующийТокен();

	КонецЕсли;

	Если Токен.ТипТокена() = "Переменная" Тогда
		Если Не ЭкранироватьСимвол И Не ОткрытаКавычкаБезПоддержкиИнтерполяции Тогда
			ДобавитьПеременную(Токен.Значение());
			Возврат ПолучитьСледующийТокен();
		КонецЕсли;
		Возврат Токен;
	КонецЕсли;

	Если Токен.ТипТокена() = "ОператорСвязыванияКоманд" Тогда
		Если Не ЭкранироватьСимвол И Не ОткрытаКавычка() Тогда
			НачатьНовуюКоманду = Истина;
			Возврат ПолучитьСледующийТокен();
		КонецЕсли;
		Возврат Токен;
	КонецЕсли;
	
	Если Токен.ТипТокена() = "СимволЭкранирования" Тогда
		Если Не (ОткрытаКавычкаБезПоддержкиИнтерполяции Или ЭкранироватьСимвол) Тогда
			ЭкранироватьСимвол = Истина;
			Возврат ПолучитьСледующийТокен();
		КонецЕсли;
	КонецЕсли;

	Если Токен.ТипТокена() = "КавычкаБезПоддержкиИнтерполяции" И Не ОткрытаКавычкаСПоддержкойИнтерполяции Тогда
		Если Не ЭкранироватьСимвол Тогда
			Если ОткрытаКавычкаБезПоддержкиИнтерполяции Тогда
				ДополнитьНакопительнуюСтроку("");
			КонецЕсли;
			ОткрытаКавычкаБезПоддержкиИнтерполяции = Не ОткрытаКавычкаБезПоддержкиИнтерполяции;
			Возврат ПолучитьСледующийТокен();
		КонецЕсли;
	КонецЕсли;

	Если Токен.ТипТокена() = "КавычкаСПоддержкойИнтерполяции" И Не ОткрытаКавычкаБезПоддержкиИнтерполяции Тогда
		Если Не ЭкранироватьСимвол Тогда
			Если ОткрытаКавычкаСПоддержкойИнтерполяции Тогда
				ДополнитьНакопительнуюСтроку("");
			КонецЕсли;
			ОткрытаКавычкаСПоддержкойИнтерполяции = Не ОткрытаКавычкаСПоддержкойИнтерполяции;
			Возврат ПолучитьСледующийТокен();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Токен;

КонецФункции

Процедура ОтменитьЭкранированиеПриНеобходимости(Токен)

	Если ОтменитьЭкранированиеСимвола Тогда
		ОтменитьЭкранированиеСимвола = Ложь;
		ЭкранироватьСимвол = Ложь;
	КонецЕсли;

	Если ЭкранироватьСимвол И Не Токен.ТипТокена() = "СимволЭкранирования" Тогда
		ОтменитьЭкранированиеСимвола = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьНакопительнуюСтроку(Значение)
	
	Если НакопленнаяСтрока = Неопределено Тогда
		НакопленнаяСтрока = "";
	КонецЕсли;

	НакопленнаяСтрока = НакопленнаяСтрока + Значение;

КонецПроцедуры

Процедура ДобавитьАргумент()

	Значение = НакопленнаяСтрока;
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если АргументыКоманд.Количество() = 0 Тогда
		ДобавитьНовуюКоманду();
	КонецЕсли;

	АргументыКоманды = АргументыКоманд[АргументыКоманд.ВГраница()];
	
	Если ЭтоНовыйАргумент Тогда
		АргументыКоманды.Добавить(Значение);
		ЭтоНовыйАргумент = Ложь;
	Иначе
		Позиция = АргументыКоманды.ВГраница();
		АргументыКоманды[Позиция] = АргументыКоманды[Позиция] + Значение;
	КонецЕсли;

	ОчиститьНакопительнуюСтроку();

КонецПроцедуры

Процедура ДобавитьНовуюКоманду()

	НачатьНовуюКоманду = Ложь;
	ЭтоНовыйАргумент = Истина;

	Если АргументыКоманд.Количество() > 0 Тогда
		ПоследнийМассив = АргументыКоманд[АргументыКоманд.ВГраница()];
		Если ПоследнийМассив.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	АргументыКоманд.Добавить(Новый Массив());

КонецПроцедуры

Процедура ДобавитьПеременную(Знач Значение)

	ШаблонВТексте = "$ENV_%1";

	Имя = Сред(Значение, 2);
	Имя = СтрЗаменить(Имя, "{", "");
	Имя = СтрЗаменить(Имя, "}", "");

	Переменные.Добавить(Имя);

	ХешСтрока = ОбщийНаборИнструментов.ХешСтрокаИмениПеременной(Имя);

	ДополнитьНакопительнуюСтроку(СтрШаблон(ШаблонВТексте, ХешСтрока));

КонецПроцедуры

Процедура ОчиститьНакопительнуюСтроку()
	НакопленнаяСтрока = Неопределено;
КонецПроцедуры

Функция ОткрытаКавычка()
	Возврат ОткрытаКавычкаБезПоддержкиИнтерполяции Или ОткрытаКавычкаСПоддержкойИнтерполяции;
КонецФункции

Функция ЭтоПробельныйСимвол(Символ)
	Возврат СтрДлина(Символ) = 1 И ПустаяСтрока(СокрЛП(Символ));
КонецФункции

Процедура УдалитьПустуюПоследнююКоманду()
	
	Если АргументыКоманд.Количество() 
		И АргументыКоманд[АргументыКоманд.ВГраница()].Количество() = 0 Тогда
		АргументыКоманд.Удалить(АргументыКоманд.ВГраница());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти