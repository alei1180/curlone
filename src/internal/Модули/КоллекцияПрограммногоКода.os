#Область ПрограммныйИнтерфейс

Функция ЧтениеТекстовыхФайлов(Файлы, ПрочитанныеФайлы) Экспорт

	Конструктор = Новый КонструкторПрограммногоКода();

	НомерФайла = 1;
	Для Каждого ПередаваемыйФайл Из Файлы Цикл

		Если Не (ПередаваемыйФайл.ПрочитатьСодержимое 
			Или ПередаваемыйФайл.Назначение = НазначенияПередаваемыхДанных.СтрокаЗапроса) Тогда
			Продолжить;
		КонецЕсли;

		Если НомерФайла > 1 Тогда
			Конструктор.ДобавитьПустуюСтроку();
		КонецЕсли;

		Шаблон = "ЧтениеТекста = Новый ЧтениеТекста(%2);
			|%1 = ЧтениеТекста.Прочитать();";

		Если ПередаваемыйФайл.УдалятьПереносыСтрок Тогда
			Шаблон = Шаблон + "
			|%1 = СтрЗаменить(%1, Символы.ПС, """");
			|%1 = СтрЗаменить(%1, Символы.ВК, """");";
		КонецЕсли;

		Если ПередаваемыйФайл.КодироватьСодержимое Тогда
			Шаблон = Шаблон + "
			|%1 = КодироватьСтроку(%1, СпособКодированияСтроки.КодировкаURL);";
		КонецЕсли;

		ИмяПеременной = "{t(Переменная.ТекстовыеДанныеФайла)}_" + Формат(НомерФайла, "ЧГ=");

		Конструктор.ДобавитьСтроку(Шаблон,
			ИмяПеременной,
			Конструктор.ПараметрВСтроку(ПередаваемыйФайл.ПолноеИмяФайла));

		ПрочитанныйФайл = Новый Структура();
		ПрочитанныйФайл.Вставить("ПередаваемыйФайл", ПередаваемыйФайл);
		ПрочитанныйФайл.Вставить("ИмяПеременной", ИмяПеременной);

		ПрочитанныеФайлы.Добавить(ПрочитанныйФайл);

		НомерФайла = НомерФайла + 1;
	КонецЦикла;

	Возврат Конструктор.ПолучитьРезультат();

КонецФункции

Функция СборкаДанныхЗапросаВСтроку(НазначениеДанных, ТекстовыеДанные, ПрочитанныеФайлы) Экспорт

	Конструктор = Новый КонструкторПрограммногоКода();
	ЧастиКода = Новый Массив();

	КонкатенацияСПереносомСтрокиИРазделителя = "
	|	+ ""%1"" + %2";
	КонкатенацияСПереносомСтроки = "
	|	+ %1";
	
	НуженРазделитель = Ложь;
	МассивТекстовыхДанных = Новый Массив();
	Для Каждого ПередаваемыйТекст Из ТекстовыеДанные Цикл
		Если Не ПередаваемыйТекст.Назначение = НазначениеДанных Тогда
			Продолжить;
		КонецЕсли;

		Разделитель = ПередаваемыйТекст.РазделительТелаЗапроса;
		Если НуженРазделитель И Не ПустаяСтрока(Разделитель) Тогда
			МассивТекстовыхДанных.Добавить(Разделитель);
		КонецЕсли;

		МассивТекстовыхДанных.Добавить(ПередаваемыйТекст.ПолноеЗначение());

		НуженРазделитель = Истина;
	КонецЦикла;

	Если МассивТекстовыхДанных.Количество() Тогда
		ЧастиКода.Добавить(Конструктор.ПараметрВСтроку(СтрСоединить(МассивТекстовыхДанных)));
	КонецЕсли;

	Для Каждого ПрочитанныйФайл Из ПрочитанныеФайлы Цикл

		ПередаваемыйФайл = ПрочитанныйФайл.ПередаваемыйФайл;

		Если Не ПередаваемыйФайл.Назначение = НазначениеДанных Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(ПередаваемыйФайл.ИмяПоля) Тогда
			Префикс = ПередаваемыйФайл.ИмяПоля + "=";
			ПрефиксВКоде = Конструктор.ПараметрВСтроку(Префикс) + " + ";
		Иначе
			Префикс = "";
			ПрефиксВКоде = "";
		КонецЕсли;

		ИмяПеременной = ПрочитанныйФайл.ИмяПеременной;
		Разделитель = ПередаваемыйФайл.РазделительТелаЗапроса;
		Если НуженРазделитель Тогда
			
			Если Не ПустаяСтрока(Разделитель) Тогда	

				Текст = СтрШаблон(КонкатенацияСПереносомСтрокиИРазделителя, 
					ПередаваемыйФайл.РазделительТелаЗапроса + Префикс,
					ИмяПеременной);

				ЧастиКода.Добавить(Текст);

			Иначе

				Текст = СтрШаблон(КонкатенацияСПереносомСтроки, ПрефиксВКоде + ИмяПеременной);
				ЧастиКода.Добавить(Текст);

			КонецЕсли;

		Иначе

			ЧастиКода.Добавить(ПрефиксВКоде + ИмяПеременной);

		КонецЕсли;

		НуженРазделитель = Истина;
	КонецЦикла;

	Возврат СтрСоединить(ЧастиКода);

КонецФункции

Функция СборкаURL(СтруктураURL, ТекстовыеДанные = Неопределено, ПрочитанныеФайлы = Неопределено) Экспорт
	
	Пользователь = СтруктураURL.Аутентификация.Пользователь;
	Пароль = СтруктураURL.Аутентификация.Пароль;

	Аутентификация = "";
	Если Не ПустаяСтрока(Пользователь) Или Не ПустаяСтрока(Пароль) Тогда
		Аутентификация = СтрШаблон("%1:%2@", Пользователь, Пароль);
	КонецЕсли;

	СборкаАдресаРесурса = СборкаАдресаРесурса(СтруктураURL, ТекстовыеДанные, ПрочитанныеФайлы);

	Возврат """" 
		+ СтруктураURL.Схема + "://" 
		+ Аутентификация
		+ СтруктураURL.Сервер 
		+ ?(ЗначениеЗаполнено(СтруктураURL.Порт), ":" + Формат(СтруктураURL.Порт, "ЧГ="), "")
		+ ?(ПустаяСтрока(СборкаАдресаРесурса), """", Сред(СборкаАдресаРесурса, 2));

КонецФункции

Функция СборкаАдресаРесурса(СтруктураURL, ТекстовыеДанные = Неопределено, ПрочитанныеФайлы = Неопределено) Экспорт

	Конструктор = Новый КонструкторПрограммногоКода();

	РазделительПараметров = "&";
	КонкатенацияСПереносомСтрокиИРазделителем = "
	|	+ ""%1"" + ";
	КонкатенацияСПереносомСтроки = "
	|	+ ";

	ПараметрыЗапроса = Новый Массив();

	// Исходные параметры запроса
	Для Каждого Параметр Из СтруктураURL.ПараметрыЗапроса Цикл
		КлючИЗначение = СтрШаблон("%1=%2", 
			КодироватьСтроку(Параметр.Ключ, СпособКодированияСтроки.КодировкаURL),
			КодироватьСтроку(Параметр.Значение, СпособКодированияСтроки.КодировкаURL));

		ПараметрыЗапроса.Добавить(КлючИЗначение);
	КонецЦикла;

	// Дополняемые параметры запроса
	Если Не ТекстовыеДанные = Неопределено Тогда
		Для Каждого ПередаваемыйТекст Из ТекстовыеДанные Цикл
			Если ПередаваемыйТекст.Назначение = НазначенияПередаваемыхДанных.СтрокаЗапроса Тогда
				Если ПараметрыЗапроса.Количество() И Не ПустаяСтрока(ПередаваемыйТекст.РазделительТелаЗапроса) Тогда
					ПараметрыЗапроса.Добавить(ПередаваемыйТекст.РазделительТелаЗапроса);
				КонецЕсли;
				ПараметрыЗапроса.Добавить(ПередаваемыйТекст.ПолноеЗначение());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Параметры запроса из файлов
	ПараметрыЗапросаИзФайловСтрокой = "";
	Если Не ПрочитанныеФайлы = Неопределено Тогда
		Для Каждого ПрочитанныйФайл Из ПрочитанныеФайлы Цикл
			
			ПередаваемыйФайл = ПрочитанныйФайл.ПередаваемыйФайл;

			Если ПередаваемыйФайл.Назначение = НазначенияПередаваемыхДанных.СтрокаЗапроса Тогда
				Если ЗначениеЗаполнено(ПередаваемыйФайл.ИмяПоля) Тогда
					Префикс = ПередаваемыйФайл.ИмяПоля + "=";
					ПрефиксВКоде = Конструктор.ПараметрВСтроку(Префикс) + " + ";
				Иначе
					Префикс = "";
					ПрефиксВКоде = "";
				КонецЕсли;

				ИмяПеременной = ПрочитанныйФайл.ИмяПеременной;

				Если ПараметрыЗапросаИзФайловСтрокой = "" Тогда
					ПараметрыЗапросаИзФайловСтрокой = ПрефиксВКоде + ИмяПеременной;
				Иначе
					ПараметрыЗапросаИзФайловСтрокой = ПараметрыЗапросаИзФайловСтрокой
						+ СтрШаблон(КонкатенацияСПереносомСтрокиИРазделителем, РазделительПараметров + Префикс)
						+ ИмяПеременной;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	// Сборка адреса
	ПараметрыЗапросаСтрокой = СтрСоединить(ПараметрыЗапроса);
	ЕстьПараметрыЗапроса = Не ПустаяСтрока(ПараметрыЗапросаСтрокой) Или Не ПустаяСтрока(ПараметрыЗапросаИзФайловСтрокой);

	ПерваяЧасть = СтруктураURL.Путь 
		+ ?(ЕстьПараметрыЗапроса, "?", "") 
		+ ПараметрыЗапросаСтрокой;

	ВтораяЧасть = ?(Не ПустаяСтрока(СтруктураURL.Фрагмент), "#" + СтруктураURL.Фрагмент, "");

	Если ПустаяСтрока(ПараметрыЗапросаИзФайловСтрокой) Тогда

		Результат = ПерваяЧасть + ВтораяЧасть;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = Конструктор.ПараметрВСтроку(Результат);
		КонецЕсли;

	Иначе

		ВозможноОднойСтрокой = ПустаяСтрока(ВтораяЧасть) И СтрЧислоСтрок(ПараметрыЗапросаИзФайловСтрокой) = 1;

		Если ВозможноОднойСтрокой Тогда

			Результат = ""
				+ Конструктор.ПараметрВСтроку(ПерваяЧасть + ?(ПустаяСтрока(ПараметрыЗапросаСтрокой), "", РазделительПараметров))
				+ " + "
				+ ПараметрыЗапросаИзФайловСтрокой;

		Иначе

			Результат = Конструктор.ПараметрВСтроку(ПерваяЧасть);

			Если ПустаяСтрока(ПараметрыЗапросаСтрокой) Тогда
				Результат = Результат 
					+ КонкатенацияСПереносомСтроки 
					+ ПараметрыЗапросаИзФайловСтрокой;
			ИначеЕсли Лев(ПараметрыЗапросаИзФайловСтрокой, 1) = """" Тогда
				Результат = Результат 
					+ КонкатенацияСПереносомСтроки
					+ """" + РазделительПараметров
					+ Сред(ПараметрыЗапросаИзФайловСтрокой, 2);
			Иначе
				Результат = Результат 
					+ СтрШаблон(КонкатенацияСПереносомСтрокиИРазделителем, РазделительПараметров)
					+ ПараметрыЗапросаИзФайловСтрокой;
			КонецЕсли;

			Если Не ПустаяСтрока(ВтораяЧасть) Тогда
				Результат = Результат 
					+ КонкатенацияСПереносомСтроки
					+ Конструктор.ПараметрВСтроку(ВтораяЧасть);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция СозданиеИнтернетПрокси(ОписаниеЗапроса, ИмяПараметра) Экспорт

	Конструктор = Новый КонструкторПрограммногоКода();
	
	ИспользоватьАутентификациюОС = ОписаниеЗапроса.ТипАутентификацииПрокси = ТипыАутентификации.NTLM;

	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(ОписаниеЗапроса.ПроксиПротокол));
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(ОписаниеЗапроса.ПроксиСервер));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ОписаниеЗапроса.ПроксиПорт));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ОписаниеЗапроса.ПроксиПользователь));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ОписаниеЗапроса.ПроксиПароль));
	ПараметрыФункции.Добавить(?(ИспользоватьАутентификациюОС, "", "Ложь")); // Значение по умолчанию Истина

	Конструктор
		.ДобавитьСтроку("%1 = Новый ИнтернетПрокси();", ИмяПараметра)
		.ДобавитьСтроку("%1.Установить(%2);", 
			ИмяПараметра,
			Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));

	Возврат Конструктор.ПолучитьРезультат();

КонецФункции

#КонецОбласти